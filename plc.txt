// Options: Export entire program; Code Block delimiter instructions;
// Formatted Rung Comments; Element Documentation Database; System Configuration;
// Memory Configuration/Devices with User Add-Ons only; use Element names (no NickNames);
// rung/address annotations; <SPACE> parameter delimiter; 
// Write/overwrite file C:\Users\hunte\Desktop\school\Normal PLCs\hunter_updated_factory_demo\cda_original_mini_factory_demo\plc.txt

PLC BX-DM1E-36ER3-D

// Do not modify SYS_CONFIG block!
#BEGIN SYS_CONFIG
5aab2ba6359cecd5273de0413242b778060bedd07352f0c395fc6ce5547a7036deb60a2ea08859b9
14af3cee34fe9d099eb3c60765da4c4b454c91736b10c4b58d087d157b453fb2b3a0693d37cf6fc6
8a610e938e159af4a5f0b609b9abe818ce4df2236997d638a9c7d954867613acb515d5e8fc3336d7
9c2bff13ca116e7ae5797f87cca25fa68bc52b61ec496c1e1742028842adeb9f34093aaa530780d2
dc9c6198beddfd06400aa2148045a65de9fc6519455617c23f5208f76ef26e067031cec2b6a2889a
efbeccaa8a16219971a1f09fa813f051646e117792269e29e53f2963d25fd311e9955ac418cbf363
5fa2ab837c1b1e03cbd0b8a7ce2ee036600669b5124e46fa36edd64906956e2e3505c9ba092f04d6
aeb273e48522e5610ebc411900103e4090e6cc01db39a6379ac3738c4315597711ca62895d74b1e9
8a2d955fafab88c38bf66b1b81d89ae21f57820df0a6835ec1aefcf1a8dda0107890e22d8c9b2ee9
1ab004f5fdde0ab8a4e066986ee902bd61d68f34b88bdf921dfdc72aca3f965d6ef02897e145c7a3
160fe838d40520a13f0a965af639ad08e2ae08abe0d94e23e8d7c91b84559e142c356b0bf33ba136
1cd31b5d3be439158625cb5edd8e42c287416e63d7619a8c580af70fc9011fb3f7d6e88dcdc4fba9
496ff57736d62aa9e49de65813978b2329a63fddad8759768f3184888aa81d1128e412e720ac3e5e
9a6f56bae6d6e3a66594b073749b2d620047101659495a643816b5a4192b7f33a43e21eb019d9e8c
9cdff72d065231d47743d59da9d3858943d7d6c5b8c7a89d523f4c1bed3bb4eb2d2f3b79555e28f0
2cc860107129a1b5bc7cacb0bda53206daf811a875395852daa2c5acf3fcf6daf5721cb0f68afc4a
d66efb2766c680c54cc9d8cecd2b9f047b32ce8c9ab533d67ebdb998acad931c08af70f5cbe29cf4
510e2771a788582d2d495e14fb4faea6c55a2443ed235f897eb17f79d10de4d4cafd99b231486c2d
a815b8375afcab9ddbe24e40e5827a05d775f4ca040e51faad61bc0e9d006b129caa5f896b835cfc
4f24c69bae1f4a3e87236c5ade072fae29dee1efde25cf473eb2b543e0bbee1cd17e925634fb4cbe
c11e08a485f87d2d5659c2ec9addeec33658af7704e586466c7437ee811fd8a86b3df2a2876f48d2
27927a56144c0257791094ec4e0d274d4a2c1ed96f84d4f186d36131e8fc305b5d9c4fff54a7669b
729b1cb3179163514d9044a298fda9f5481f61b6cf5a6d3a304abbaff1a2a573edc0ff34cb255a03
0d5b393be16bcc82f5a78d0c67bcd869cea5e66073e5f9d27193a18794469026f26d982761f637b7
4aba60b79386e0268538155fd425fa849c6b3b0daea63b7e3c9deeb1b6de99130459619c5a041cb3
3ce9365de9ca38c4b2d65766897db282376bd4483d82840c508ee8a266bab5e46bdc9e0d0f50ae1f
03399222438c10111d04d3c55ef140bf6eb04fc31c41022aad633703bae68ba368d849c470924407
7cd532bb37b2a289176f9db9d2b7d1d9ad7a2179fb52e27a46daf145e5442b8395482ee4b504cb89
7b311637173ebe694f1ae764693b57b37d3b1807065b7d161b1c56ac40c8a0f08bef022372502f35
6ab8f2781474d984e1028916d06edbef6f7996ecf00a7bd3f4e483ec83e40f10d5aea0d2d8e3b9f1
94bad2da0d075aa9599e7bea54dca460a751c98f2999652b59ca8f628b442693cf9bf64fb1c3e30c
92b68efa99f8d8edd1161c62828ad589f197cfb086433a45fe1a03b8e7156ff7dce525a3b1380b0a
5b40066b49cafd277cd66d63abe21f5f7371924f2c2b1015685c4670409ac16bafa16920dd9db1d3
c8413b0936920fe54e966d4ae717e7e23f8467c5816424be262fe36dbb9bef3f1f48625d1b78e569
ec5701e4a485beea8e29bcb081cb8074db9c2ab5c930be24727e982a2979b44c1bf0d483a746772b
553724b46af55525a76940301ef481257ae6af94b30fb0a0c09458174e65137e3cbed8ccffc50d4c
11381b520871b4d976b1cf625b031658d1cac7c4ed77c485b2c7dfb97059d3e944b810e55f76f48e
f208cdb639561e0c0ff39c5e219fb66cff93fdf5fe3159de39e824597a41b8300f4ab8571e4e0216
0b68f60973a9aefa01802cd877930525cad050bc7317d7613a99d369a2bba2ccc9118d92d6dfc181
e5aea34e8eb0b3178fbab2e88046d474c23923abf8f84f57f9d7662a0e9da69f366f079e29306da4
ecc7ebebff49ee84e05055fe385f5519ac89071716ea7690a88cb51ff8a780b5abc007243d234306
70715c11fae706f88eac328c3289697e1748a6f6f2a8b404bd555d1c222ced71d4d3d4b81d468d7a
84fe11affa3ff60577ce18fb089f3469e198152d43caa55b7abea42f47f6e0d74abf49912fbaf50a
8f158b96db86f4bf3d81f4dc71282cbedf8d1ec5c82037ef08c18854da1aed911f33f18d8e58a169
c45d6bd3207e04829b68bf4829de2c03bcd230d07c9320de1046cc315710dd3ea78c64df046553ed
980a694d9ebe997ceab15ea939e3cf4bdaebedbf108f919c6f95d755dea79389fd74c72f66e49853
20b9ef369f1a000d6674d8ec6b72ff048989145bce85f824ee87de333f17883e237eeca4eb5fd8c0
2d090635dcee356be6eab99a00a0f17bb2ca5933dd78939b06a1d6fc3ff70b3b9f917b63e6a6cc21
28603b7881a6ab1796c8d086f5b57eca4d755821499d9a7ff62e61266543de7d5069836ddcdee098
51a7160eb01e5c69c4241685f7729226c57ee6e6e49a849c6567dba09eb00eaf45d726a65b14fe4a
84085ac2c69f3eff012dea37a9bd3a5d0bf99696052557345b236ad6c83e7bf866ad64405db7d52e
22b815c9e68560d8d49472721d4e91d05d2c190f27e32dc03f5c1c615c5b34ca887ae192b3f3729a
5b311aa86d4a1d5b05b79400086e57f20f4b3a4069abe46f8ec11dbd414956ace6ab6e8751e007f8
2153bef8d4b672581b7e54bc0963cd92c8d7154447dca35759e264ac588163f6d6c338cf4c651f6e
ccebe6f8e18be8b47e13b24d0c7313e6e35ac2cbdbbb6d0917912ac3c67bf60f36dba72cdb66cff6
8b5a9cc7cafcf22b2053739816637c5a823c351b6f8d5de9e9c6988d1ec0017a740089aada0749c4
f821f444c19b15e3f60d034a02374eb2524125f4702de106ba972ce8cfdffae3953b33de45061e3c
959b848473d1d1eb3808b86290a064d859c5c13303e19909aa118e51d732eaf2f63d49131aba3d81
7aaa77e89ff59e9a1d5f12a6b7303052cdc1ef70fcde43e96faa7f266498a293b025c08eb630fbc0
5e3aaf93f5b7e39f874d2424d37171776280d3ccb3b8fbd933e7282ebbc556c2fda80a1127f0106d
0a29098444531b766d11434b16af6758ecbb215a30786a695d75705a7b6d780729f461218437bd8f
438718fa328c9e9ac956bd21448674b22ef7279a93fde4e9e5477ff6527bfed7f6e0f5f47a6a265a
496471e3623c990183074faa96186176cc8b548229cb02299982ee713d08458ca84a284935b70fd4
345f011b5b5d2dde1f8888d1910e45a2b0339cb4a29827b5e799a2d7986d464d2f5c97fc7b3fcb34
9eaebf8479a1c998b02d3561a0b3ff677bcf810650d990033c0659d28a5abf780af4365dd54fffa2
f1b6e57a536cb414b9e6bc5a481ca58adf45be1b02df63fb5641ae7450d842f2d3c07c8454d08356
f13c91cf79d30fa9c3b7f696c8c2250cf8b20af565051598bfa7970734a409a479326aeeb1186c32
0d4fa8ba82d744018c05d331061e3e139f2ef6076e103918ef5b14c1824b6f8de10071af0dfa30bb
03d431f68464a6517f2b7dc2d16533ac85ba69492ffe024ccbd28bba64c631bb30a0bafafc0cfcdd
49491050f2d1db098fa8aab71f0933d4fd0941c82b533f2ecca7e5ffbfb9b1c2a5f723a3bf317a10
a4e9a07e28f9b782496d4f326701833be0368d9bcc11dac7b522e57a79e061c4231f91283553583e
dc2ff55db6affb3ac988ca854c688afc1dcbe0eb893e5583d409c28f7f5ead278d9c7a3085cabe00
ad703ba32e33ce7003e249315d4cee858f0e74e9b241a05e23103581725435dfc0b86d5a28bb5054
c505a370ccc1a847203f34f314094b76c8e8152fd446b9efc00367b08aeab9f8933f97a2e1735413
4d1ff87a30570ef25907ba5fe458fa3d98b9a0765164e8f29410d9a25f8f53aa26e22d8adf59e94e
a851bd24fa2daa4fb8f814d6f020c0049778f3344725c3957636575f71ebe48e31e47e7d34898fc9
c9a0467bdacdd8afc1f7575c9ff750a06caaaa7176bc2cee940be37fce0259968b4e546f40eaab4d
cc0c9adf62737042258ef6a63766d38d0a668730eb09fe08c368f2fd54a85eb2d7199ee3d7c490f3
0bcd6c7eb2614954a11f7495a0bebb1be7eb9878b3ff69427daa0a078e628767157793c5a0a74ef5
3fa4ab021ee91f901dc777564490b2bb84b07f53223bf2d23056b7e2fdf8586466cf992912da8ae3
34decdd59e918a28730ae32674efa7af599be027288c955b366e0a6c6cadb1e45828bdb623a51e02
154a24983afa1d301160759c1f4ad46e9702d7feb5b498d139e68279674b18aa0f4430e526766102
43bb9c0ba0370f9e79ee68feb68671a925bbcce94b26ff66fb5c09b588067952299e28dee04d413f
d5f990bb531a4b197165c846a029c4b9a9ec6781623df7f09df995b4cebb57566768fe38d1d6849c
b3d41f6a2568868819fc2caf1cf61aaf73094b7234b7f5c039417194d58adf6e41b818f3b2a4c348
aaed239f50a8ac3842cef8a08af9f2dac313243354df3dc19a32e2fb8b431b1637516784731f256f
fbcd332a78b82dc5a0cefca3d8fde48cbfe5f336fa9e0121363ce628d61e07cb684424b111cee630
70829120ef93ca033e6e809b0f1944dcbc72d1a9c242e4f0cd725821b15b13afeb68ba0621d86564
4b2d1bf80fccc6e7dad4aead0e6a74c69971d98271cab09a8fb9ed861f4b88569ee13d03bba49a6b
187b70d3cf7bcb5d519cbc82915cdba0037b277e36198cfd72ad8656819c855fe729092d3aeac239
40362226d939c0039b0d7a709ef20f61c33a1d6c3672b7bd08564007c71c3f108be4651aab518eae
e5d094c32b432d4ac21e65aef62e54f2dbde65bc1a0772f0d471f6f35ff4a9dea9978bd1f67a30ff
fdf56bead1a27dad90656d605d6a46be31fc6fbf6b7657d04fa59533b072f5b2d5f9bb46e7448a09
3838c6c7efdbbeff1a97af32a2e9262aebb114d220a24431cec42a6a3d9b371c230a6131a3cce18a
8f4597f952fcfbcd8c5c4cbf390be7f6280dd268a8cba7a2120f4ea5ed6a0cd2fd9d2edacdd71eb7
3300c23b766253ffc1fc497e35b65e957ce1112a9c6771aacb5072d459cdbed446202ca91966cc3c
0cab66653b0b4852e356ef570125ca70d403a6959df8b1e0fac0dd2f75096f8a0297511bef56b546
2facda25098000e28e84c2f2b665ff48660f11f5cbf1c9879931fe0a08b3654a08dd0f07d8d23bee
34f86a7fda20896c76ad367cbf47c36b9524cad8273afbe65a438eb5c962cb36101422fa71097ada
1559c95bd3171a90e90a3b2fda69ef64b12d71e84100aa3fdbefb698b40c9b60a1005fdac9c18f66
954b379aadefb6750f7a4ba8d2f2d3d0c566d2f693a67223fffbe3eb421d4984b86de83b361a7608
491e4426005b8e3353a62ed55316d0ef82bd1b752d2f77926eced731ed9463b10199a53193dcf4af
0f86d0f412382fcd949e78c1596f72b8c83d5c9ee7c8b68eaa78dbf91f5752097f3d42dd60ec920d
6c94dce6d6b1c1777de909f379b32f8c0d802acd74138120044422a31742056b728a34b6cedaa00a
247a357dd4abcd37f3b38e248b2fdb54de98c3dacf09e5ad7b49aaa77b1aaf0ab45ecb2ecc6ecf45
ed6a885393c2734b79b40102affef48a129e18a70287c76b79d2c2675c61c6c48b2df16b1962818e
2d33f582655ba5d9816f954226f3f16eca2347c1c5b9d752fb967917a4762e017ad6ed0cf0c30d46
ac85147d3f92f579272ac4d2cba40e9a6db7d1accfbad747dd426cee049a1586ac87f0578798d3b3
eec0f3c5a74bef4e166bc2e7f0da6e9847273c12e49935122e39a3712e5e12d7bae548e4ebbe2d48
c8baa5a7d53af9377435d27df94719ebead093cbe3ef65a5044bb9605b5fde03cf9075dedab875bd
8fc57b1eb97a443609c641c70259d5ea18de0909e14dbb89522155418f8810d4ca3b2c41719ef6f7
ed284f22c88bab30a8143e368bdadfafcc9ff5e29882e70f530ace93f4eda43426660df69f84560b
1e14bc2083b656e4ce225202f2a69cdf0b26ae1127acbb362f888c48fa88c3c1703257d44d75fc25
90275da2476232e41a1e2f105d48e218644c5da00b279f0f11439869e626a8266a2c781d67013452
d8c5f16a01a0fd88349a53cc0d93c951122494afc3ae97e87e86fcb0e99cfda993fac44091b0639f
bbf0a6b1ff3f8211c0009532e8f2cc5c07aa2f05eec4cc2fc6032393f608bcafde290b5cf6905a70
54a7b55c403e571a5549a50f61c8dd191b9c1aaf3b4d98bce2ef24339e1ca46c4c8ab60abd29b02c
dd6739365e34742df44fc7fe6d556c0e740f499b42cdb1f07bf7d19e13b979147382b3ec18b24ad9
4871c7d5d15397c27c7df89b457e122fab1295745c437f7744114fa00be74d2edccd52230a1bda2d
28ade9bbe51b1f73a69e4ebd7cba0eafc6654671c18767fee9124d77020e63736efd8b57e72e8200
ff25b5b3785fe9fe7480182440e59911a04f9e75700c509ede1f4be2f499887a33a09f7cb8ad8441
d54d9f65b764c96c504819a950ff7d828c10964463d522a85cdca60ec5bfbbfeb82ade9b796b810f
3d1d0464736c78bf66c0684f781dd5aac51333583e2d241ea7c24ec135c9d67cb7c9ca4f06540a7a
ea86d64f7746218adc9d058074cc51ce2405a28548b788005091fae6f48f0bcf474c720ff0d60f1c
22eb63ffd7ffebe580be277f0577db84599d0ba0ee9a008053c9a9cfa11140debdda93ce7c3c0c40
46aac76e59aa6f504307b7f99311de95da81113751a2771b86782dd4e27eae6b3294cf2493f26cab
d72e5b200d6d88f99e5e76a01b53e1a1809ad8a16b5ce93c935a853912f6700016ea151e0e252dcb
ded0e98e60668d1523fdfce464202c26d818d3dea668e966156f3cc645e34b7f0413c17cf23ff480
da36f6c7693d7e95fab6ae105742c1e55c6e820f325f2cc514e5220732a401eb09118d2997795559
5b9735ecb8330cb4e5bdc207fa654add5db95e927583ff683bf3f30ffc906d6b204428d7b86a128e
ab90bc81f0ee29c425dc9bb5c8638e183a6e7220fcfa1c29d264fb6fe7f0bb6e12dfdbbf2a97e2db
c424a9a8ea23787e5ba1a81d4e7e94bca281a15cf0e6feda5cf73f1074fdcb1e38c544f84a56bd81
14b2002cf1f36a17170298295b685fc835dc2e7a1e36a8dde53d0f1f30829a2c0db0b89b4973a4ee
e47b95d0a78892e25d978a3593be9b9e07cd0d03091dcd01271b083107c14f2afd20676757d59c5f
2591a4dfa82acc00e67e277eeaf1a22829d2433dc10a2b8d9131fbd295ad98287f01aadaf4f1e423
cabb3afd6a1f7dab29acb5edbbce5e782e8b94a3ea22edd3412c2461f7a8d158645d073b03edd102
3ed906b8099323dbc6e91b23d58b2c1469fe42575aaa61b6751677abdb897727ed6f38ebcca953b8
1f2036518a3c8e890a207e59057b4f685eff0e27a8bb7062583d81360972c2cdd2efdafd2fb1322a
a4582bdeabc073d43db1ec4ff505b52f65d3e15dba42eee1674e0a00d5e8f8be019b2579fd0815e3
329ece6898fd14631a0fc744933db2be344bf9e5eb95ea3fe75e77dfbfe06d776dab584ad72e7f1c
a45b59c48d2e54df804c0e0d0c6cea8c343a22792a74e403321d41f57a3e9adf86839feec1ee2cd3
2a45108aa170f81758401589eb9c8ce1f09c92ce01d2e7aeaf6e53bc7e9a1787e147f13cd7902519
466038cfb4095a090cd23d53931211ebdd4bc341bbe2b071126daaa7f7504b862fed355356c560d0
da0b0701fd5b8aca8ee09a885645a261b5d6a4408894d757d702eccee4926722251791cef2e14eab
64d50ed7e893618494b7f63eb0469d8213b6a58f4b3632b3b2d5dfbed8904ed4de3ad716da0c8541
f049ab76ee6a4381c2f7e68f83e99a88f58e03ccdfa7f67bd6a2804da5dc89cbe6b0d85133c68877
0f345fbf0c66ee170def822b49e3619172a0ebaa3b1ae32151430e8a75af1161fdd96696f82619db
31bce083e1fcd4da67cb03c2553e822120ac06c57580ff43be01026226f6483b651b6c55874019a6
115b8f7889262f88cb19203b554eac0e0cd60e3b936c7f7ad8f4658f319f4f5818479782e4fa919c
3b55cdb165be0c7bd6af92395bbcb8509abdaaacf2e6a752b237982f037ace369f4ba83b28e1d35d
9069c1d5bfc2bfe8fb42d69d3329b569fa5875c4ae3417bb05725cfb3838a251bb44ddffe526e9d9
e0a4d5986f99ae326c376cd49ebaea7e541aa4fa75cbfd9c79833479d6fce63cef0e8e7509f258af
25ce5a61af7e467125d836bbc02dde5de16b948a16fde086d77efe2e465625b8ea839619a9f1279c
bfcbe5265b3e18436b0d33dd14df0bfd51149bbd568fa727b18d9eaa2c5c49587b899bee34a3e579
c5501be1ce4b23573c1bc5ffda699fb2e935b0a732994ddb2636c746d1e957bab52e281e56c98d08
d116cfd6da4e366da9bca7184a6756df00e3ff555b3a357133be38061703eba404ba2a5da28dfe7c
1863a5ce1c8c2b6da6456220dda95bdeb876f7b676bea3d5751d28bc462f18af0b1fef8dcd400867
7a50f8a232daa9f5a6d99d375ebfe8784486e8b0a8c7aaaa38ec8cbe59fd1e6b9d08ead23be8d2d3
fc52432c413d51e76e2a3e3b49e7ca6a6033d6e0e3cd52a9ce833444519f8acf5833af203882ca47
1a69588cd4332454e1811140785b85a8ed7e8cfb4f2a00e899848ed6cb6b45ab8c90a4056dc27c46
e2fdd00b0f15c5416dc36fdb95b90a5c47c9388f1f78d6f42a06231042388eef573633dc953b29b1
766624a410103abd439aadab7e5034c374c311776e981731dafaa3a512242c2ee165f69689befdce
c9a8c47290ef66971353ec4cb2c2c3d432150f2a4c5c7e6cab530ad47ff78fd86688fc887b181ad2
e536bc320faa050bfacb79001de4e6ba9832ae113e3a6de10407a2a6e539bd82b2bb8731e7d97f44
edce835d49449d26e6a21abe02e66cab74b1b7b8cad9535ee3bbf54677784cf2b232fc2fa3291b22
97d0cceffe6da93eb4ec1362136b5bb051cc702b263e74ff936b0964bdecf3a7a5776489d5a6b5de
a1dc818ece94e7e294a6b12750fe15fa7e740720f121fbd310ad6e87e91e6e2fae1e84b37b9fc934
496fb46480466602cc34308e41c36c6d18799d133aaa9e04b0edc9309e836150ab9ecce8ebbe7ab0
08e5ed9077a6d87a25281ebb85c5e186793b8ffc7bff1f47b5881ae1ffc257f10cabb68c6d6c91b3
809312d31ca6f7a0ef515b90d72b6b5fc58443e1bdd512c690090912365471a1f32077edd9860de1
4a5a770a4626da7f4a0992e110d190fee18eddb15f62f521c7c813b1df06bdeceae627b3236a6f73
f4f6abacfdd6ab168fd42aa7f9f44b69bb4db905e986bdf6f7a3015695d47ccae82b53f1cefca588
ab5ccb1edb62f2c9ff4cb8a0dd1cbc68ad14631aaa45b08366d30b0879d62a34c5301cc95f356160
66578e406c68380cd1cc0d35f78228b667155efeeefe8c5e63babe1bd844d8f7f0a415db3b2a2fa6
c922a9f6fd3315679802edb2868ba7f26339d3686d4b9a5d851962e3a5d3bca0b95efef5e6748c39
40d7e6290013ff83a13b5d2d0574c8d45ff2b0b0f9a115f5122807e5eb0f9526e9924bcaf572f707
707108f88a203a41743239ba9be5d12f7a04edfe8e05b16e71553d379412564fecff31e7ffc2459a
4a6ecb249f2e7406f08b1659dec15aa1bbd76f6160ebf8e30f6197470193cb161a3fb8dd39c2a6d8
ad856c2bb8f605c5738048ad9765f7f0fc9c64e96592793a26c22cbfade64347f23c15c7e7492ce9
62079dff2d49f26bbc6b2c95b6b0361b26a132e1bd360e7c46408d2cd23579fed34df639e62e6b55
e33c1afceffe0d9d5f11459dbfe74ac67fd4802fc82817e96bf5dc33862d6b8e098dbe43f8a5a0f4
884ce83f2d60a8de128ecd40bf0242eca423d8450370563a77a8ad75dcd7bb733989e59cb3992b53
e7f26ba04d1935cc522d590d9463224a3e4389ac47d590be11141a4b2d4897cd0224fdc7783cd6cc
9715e0490cc5caf90ffe50d1ee700c5bc9d8d989c733dd2feaedc49c6a6594c3f5359f016a4e72d4
80bcb5933994f3a091f2d7b2a9680559d7211cab80d8dcd90d2482328f1e7882e4d713ea98264128
2dff15cfdade987653b7007d2a0bb1511628ae48e41a47a2b60511411016f6f188af50bb2a7387cf
473102e647f914f0f4f5ee930599faf48d312284785d6426a5e8ad4f2efd1ffa883a7b1cc509cfe2
a392def693e3a892bd86f1b6b45836b7d3b43344e4fd23909523e67554e1a1f0c040185faa840c14
ea5954f30293618bf7a79b02ebe78b4f5d0be04ca237ebae9d96db7dc170ffc35d971af7d42d6b9b
145e92d25b62d8e22170811bb73e31f411d9e2fd66d369c4a3eca6543b929bcf39164b15a280e540
e2b42f5b95bcb76da7a8033609186fe40204e7308a58e12a191e915f1966195ce4fcec4294409ea0
a7eba6437a8199331810cd7a77d8030091864d7df2b1b71c80dedb623584ae23725c524aaa6a6a32
ac36e25670a9883134db4c88c3f82a24f67bbbe315ba639b2c2972cf48296477c28dd538430ebbb4
b883bb50666e2d393af1bc5bea7281aaf2095852168542f3c15a9c400793a724453eb58630cc83e2
a41140ce91fd80bee4a290e453a8f553705b1d2deac39b5b2c64f19e45f48705e369bdff299fda64
fd1f6034b7f394458250ea6bb84d7eb9e97c75e2af5ecfd5c4ac17f3b16bbe79c0cd5da7cefaa53e
221c9655ced089e17557f5ae7b975651691274d3c542018488e5db210acae9771fb21f27ad3044d5
e230d69ef8a7c51a8f9f81ad45d6a61835140910655d2511940207eea7342e1e339bbf26f9155cfe
f3e3f6ab89dfd03bf1fa58525228e84cb4ab2b6356fe497420a8c917e52d1cd36f0b9adc962bfd7e
9f1a8753c2b80b01439845217ded5dcdf6a0106e764608a00eb3bdb42892d5211dd9809546b06dc4
5c453c71333cf617596aae230fe37bace38fb66d8157661dd3814a8f690417777b449e4629e35f2e
02429553011feb12aeb24bcc2164395a93e9d49c46989b2a4f99a3c6b445926924a5c6e7a2e4efae
1c80f449842c6d9b7b48cab19571b8dff3a12b14d88d1655854f045b8fdee3eb34f35224504dd6c7
2cc65723df3605bf0dfbec93b3150f7fc82989f11aeb5fc0bb7481d68ed23d6d0512eda9fb2caaad
0aa16c4cd627a7eb02c8a4504c9fe7beba47a008c8781b6bfa4addc63845a2a7880dc4f16b153038
86cce1c73a0a849d2d5f3b9c106032835dcc601642488f473163717a99887d2c41a82fb290a7240e
2edea470d908caed6c45f4ada4fc161e4d4f22ac0eefd08cc653409a73c40669f1ec025a488f2ec2
e5566e6c54dcb21cc7687e33340a2c809cf8e4954c5ad5e3e59c6b7ea8a38cc28e1575c9b9cb7f55
726557938e8d2148cd4a2915c30c3a36f35e44e3c9056127489f0df9839301dc2de7c81fef633787
7f91698f2c76b5bea7b7c4e325026a3c14fb3adfa1e1e573c11b11c1aebe6395beab540091f9b3da
0c08f5d57e660a0a564086ac0e2b123819f1bf1e8055055a489129a9053f918c4ab9187339c4f870
052e99d5278b33286f5f45d3a1d18539286c29e4f581b54b099d4b00efcd3c1277a0aee20f2b0939
8dc2fcb2c854d6d5d7cb6e34e0d68fda0a2040b7c80d163aa8164dd98f02ea20a4f2e09743387720
ac767892d9cef9efc6de6a48e726c5ddfcfebb11be087680c3048cb8ae99cb96d2ce789d9915c7cd
5dea55b35f49c6c4ab55373f5b65cfe5a44891683a00c947cc9b279d35579e56a3e3e5d78ebf7971
2d9043bb3e6cc84fd13f0fe4c8429fd179f6f0eff8170475d21232f71c5e86a1cd5076b198671283
aee1ebbb2607ba49a43266e6caad49d3f560014226b02e2238b1b3a67ff8cca125ca9fdbb6bb3342
850b7951199525e6f0719b849f248c0bfebca74f1c175d264c25307ac2d10163b332f037ffb86e4c
2480a4c5b65140c99ec679108d65c37044f54b64e43faede3021081fe32c887f373ef3c7ba8e38c4
769182f19831d25289fbd6918e966c76e99886877553bf6884c3d2377cb6066b2f25f4f54942a627
97304578b472859bc07e2ddf26b9d33d5e594a0979eef712b16ecdb1c313becbafdba3ffc4407de2
a69ef3e925119ab62816bce5bea96a4859910054f54f1597672e9d0798da36d7b86f2ac36752a0ff
b0c0c9ebcc399eba1e8f03b4b14f81afc93c971108fd886c7c3007df20879b5cd8de27f79bf6ce37
415fafa3b3d2431bb78200cf173e658f33504353bf589dff9ec821ba9c7d1f835dd70f4c06e0ebfc
0a9cca59d6240c8fde85b35cd7d398a3172d28e29cdd2f67112365c32d64fc5756251f98c20414b5
aa671dcffe3e12af05a62ffe7ba1157ded1c2487eb01e49d32d426a0cc350c956d58a5aa4a05d3f6
8af262fa0f6ec23bad077cc6fe1e54ee88f4fe77ee03b79d292606afaa5647b8853231828289918e
452e9c9b7aba1dfed210ec4a03d3956188fa8a8a10325319485572c859ebea3531a5f9fb960e07bb
28028222f67e19a209ae1e0e616e307bfc36ed8146b50c543d3970af5373fd8437d2ac6fdaf62267
958f6e3a
#END

#BEGIN MEM_CONFIG
 HBW_Program PROGRAM  0 -1
 VGR_Program PROGRAM  0 -1
 VGR_Copy_State_F <Virtual>  0
 VGR_Suction_F <Virtual>  0
 MPO_Program PROGRAM  0 -1
 MPO_Suction <Virtual>  0
 MPO_Copy_State <Virtual>  0
 SLD_Program PROGRAM  0 -1
 SLD_Copy_State <Virtual>  0
 SLD_Suction <Virtual>  0
 SSC_Program PROGRAM  0 -1
 SSC_Copy_State <Virtual>  0
 HBW_Copy_State_F <Virtual>  0
 All_Copy_States <Virtual>  0
 HBW_Manual_F <Virtual>  0
 MPO_Manual <Virtual>  0
 SLD_Manual <Virtual>  0
 SSC_Manual <Virtual>  0
 VGR_Manual_F <Virtual>  0
 HBW_get_X_Z <Virtual>  0
 HBW_lift_seq <Virtual>  0
 HBW_load_convyr <Virtual>  0
 HBW_PWM_On <Virtual>  0
 HBW_Reset_Flags <Virtual>  0
 HBW_rst_switches <Virtual>  0
 HBW_Unload_Conv <Virtual>  0
 HBW_Unload_Rack <Virtual>  0
 VGR_vacuum_drop <Virtual>  0
 VGR_dropoff <Virtual>  0
 VGR_home_reset <Virtual>  0
 VGR_pickup <Virtual>  0
 VGR_PWM_ON <Virtual>  0
 VGR_Reset_Flags <Virtual>  0
 VGR_Rotate_To <Virtual>  0
 VGR_rst_switches <Virtual>  0
 PWM_ramp_UP <Virtual>  0
#END

// Beginning of Code Block VGR_Copy_State_F
$LGCMOD VGR_Copy_State_F

// Rung VGR_Copy_State_F#1
// Offset 0
NOP

// Rung VGR_Copy_State_F#2
// Offset 1
NOP

// Rung VGR_Copy_State_F#3
// Offset 2
NOP

// Rung VGR_Copy_State_F#4
// Offset 3
#BEGIN FMT_COMMENT 
"This is suspect -%3E<br> <br>"
"Need to check if its really x57-59  or 28-31"
#END

STR ST1
AND C2001
COPY 0x1 "4 0x0 Y22 MI200 1 0x0 Y23 MI201 1 0x0 Y24 MI202 1 0x0 Y25 MI203 1 0x0 Y26 MI204 1 0x0 Y27 MI205 1 0x0 Y28 MI206 1 0x0 Y29 MI207 1 0x0 Y88 MI208 1 0x0 Y89 MI209 1 0x0 Y90 MI210 1 0x0 X25 MI211 1 0x0 X26 MI212 1 0x0 X27 MI213 1 0x0 X56 MI214 1 0x0 X57 MI215 1 0x0 X58 MI216 1 0x0 X59 MI217 1 0x0 X60 MI218 1 0x0 X61 MI219 1"

// Rung VGR_Copy_State_F#5
// Offset 49
STR C2001
DUPBOOL
AND ST1
COPY 0x1 "4 0x0 MC200 C400 8"
POPBOOL
DUPBOOL
AND X26
COPY 0x1 "4 0x0 0 MC203 1"
POPBOOL
DUPBOOL
AND X25
COPY 0x1 "4 0x0 0 MC200 1"
POPBOOL
AND X27
COPY 0x1 "4 0x0 0 MC204 1"

// Rung VGR_Copy_State_F#6
// Offset 82
STR C2000
COPY 0x1 "4 0x0 0 MC200 8"

// Rung VGR_Copy_State_F#7
// Offset 89
RET

// End of Code Block VGR_Copy_State_F
$LGCEND VGR_Copy_State_F

// Beginning of Code Block VGR_Suction_F
$LGCMOD VGR_Suction_F

// Rung VGR_Suction_F#1
// Offset 0
#BEGIN FMT_COMMENT 
"Keep on for duration of function"
#END

STR ST1
OUT Y28

// Rung VGR_Suction_F#2
// Offset 2
STR ST1
CALL VGR_PWM_ON 0x1 DST511 "3" "3"

// Rung VGR_Suction_F#3
// Offset 10
#BEGIN FMT_COMMENT 
"Get target Y-location and return location"
#END

STRN C610
MATH N1002 "$VGR_Encoder_Y.Acc + N1000"
SET C611
MATH N1001 "$VGR_Encoder_Y.Acc + 15"
SET C610

// Rung VGR_Suction_F#4
// Offset 29
STRLE $VGR_Encoder_Y.Acc N1002
AND C611
OUT Y23

// Rung VGR_Suction_F#5
// Offset 35
STRGE $VGR_Encoder_Y.Acc N1002
SET C550
RST C611

// Rung VGR_Suction_F#6
// Offset 41
#BEGIN FMT_COMMENT 
"Set Vaccum this should only need to be set once then it "
"holds vacuum until released"
#END

STR C550
OUT Y29
SET C612

// Rung VGR_Suction_F#7
// Offset 44
#BEGIN FMT_COMMENT 
"Return to starting height"
#END

STR C612
ANDGE $VGR_Encoder_Y.Acc N1001
OUT Y22

// Rung VGR_Suction_F#8
// Offset 50
#BEGIN FMT_COMMENT 
"Starting height reached, nice job you've finished picking "
"up puck"
#END

STR C612
ANDLE $VGR_Encoder_Y.Acc N1001
SET C613

// Rung VGR_Suction_F#9
// Offset 56
NOP

// Rung VGR_Suction_F#10
// Offset 57
RET

// End of Code Block VGR_Suction_F
$LGCEND VGR_Suction_F

// Beginning of Code Block MPO_Suction
$LGCMOD MPO_Suction

// Rung MPO_Suction#1
// Offset 0
#BEGIN FMT_COMMENT 
"Enable the vaccum and turn on the valve to hold suction "
"when we are inisde and in the oven reset stage of MPO "
"Program."
#END

STR MPO_Program.S1
ANDN X18
STR MPO_Program.S4
ANDN X17
ORSTR
STR MPO_Program.S10
ANDN X18
ORSTR
OR MPO_Program.S8
OR MPO_Program.S13
OR MPO_Program.S9
OR MPO_Program.S11
AND C2000
OUT Y17

// Rung MPO_Suction#2
// Offset 14
NOP

// Rung MPO_Suction#3
// Offset 15
STR MPO_Program.S1
ANDN X18
STR MPO_Program.S4
ANDN X17
ORSTR
STR MPO_Program.S10
ANDN X18
ORSTR
AND C2000
AND Y17
OUT Y20

// Rung MPO_Suction#4
// Offset 26
NOP

// Rung MPO_Suction#5
// Offset 27
RET

// End of Code Block MPO_Suction
$LGCEND MPO_Suction

// Beginning of Code Block MPO_Copy_State
$LGCMOD MPO_Copy_State

// Rung MPO_Copy_State#1
// Offset 0
STR ST1
COPY 0x1 "4 0x0 Y45 MI400 1 0x0 Y46 MI401 1 0x0 Y47 MI402 1 0x0 Y43 MI403 1 0x0 Y44 MI404 1 0x0 Y52 MI405 1 0x0 Y53 MI406 1 0x0 Y15 MI407 1 0x0 Y16 MI408 1 0x0 Y17 MI409 1 0x0 Y18 MI410 1 0x0 Y19 MI411 1 0x0 Y20 MI412 1 0x0 Y21 MI413 1 0x0 Y13 MI414 1 0x0 Y91 MI415 1 0x0 X12 MI416 1 0x0 X13 MI417 1 0x0 X14 MI418 1 0x0 X15 MI419 1 0x0 X16 MI420 1 0x0 X17 MI421 1 0x0 X18 MI422 1 0x0 X19 MI423 1 0x0 X24 MI424 1 0x0 MHR440 V1600 1 0x0 MC440 C840 1 0x0 C841 MC441 1 0x0 MC442 C842 1"

// Rung MPO_Copy_State#2
// Offset 63
STR C2001
DUPBOOL
AND ST1
COPY 0x1 "4 0x0 MC400 C800 14"
POPBOOL
DUPBOOL
AND X16
COPY 0x1 "4 0x0 0 MC407 1"
POPBOOL
DUPBOOL
AND X19
COPY 0x1 "4 0x0 0 MC406 1"
POPBOOL
DUPBOOL
AND X13
COPY 0x1 "4 0x0 0 MC400 1"
POPBOOL
DUPBOOL
AND X12
COPY 0x1 "4 0x0 0 MC401 1"
POPBOOL
DUPBOOL
STR X17
ORN Y20
ANDSTR
COPY 0x1 "4 0x0 0 MC404 1"
POPBOOL
STR X18
ORN Y20
ANDSTR
COPY 0x1 "4 0x0 0 MC405 1"

// Rung MPO_Copy_State#3
// Offset 124
STR C2000
COPY 0x1 "4 0x0 0 MC400 14 0x0 0 C800 14"

// Rung MPO_Copy_State#4
// Offset 133
RET

// End of Code Block MPO_Copy_State
$LGCEND MPO_Copy_State

// Beginning of Code Block SLD_Copy_State
$LGCMOD SLD_Copy_State

// Rung SLD_Copy_State#1
// Offset 0
STR ST1
COPY 0x1 "4 0x0 Y30 MI800 1 0x0 Y31 MI801 1 0x0 Y32 MI802 1 0x0 Y33 MI803 1 0x0 Y34 MI804 1 0x0 X34 MI805 1 0x0 X35 MI806 1 0x0 X36 MI807 1 0x0 V3200 MHR1600 1 0x0 X37 MI809 1 0x0 X38 MI810 1 0x0 X39 MI811 1"

// Rung SLD_Copy_State#2
// Offset 29
STR ST1
SUBSCRIB "4 WX0 V3200 1 0x4"

// Rung SLD_Copy_State#3
// Offset 34
STR C2001
COPY 0x1 "4 0x0 MC800 C1600 5"

// Rung SLD_Copy_State#4
// Offset 42
STR C2000
COPY 0x1 "4 0x0 0 MC800 5"

// Rung SLD_Copy_State#5
// Offset 49
RET

// End of Code Block SLD_Copy_State
$LGCEND SLD_Copy_State

// Beginning of Code Block SLD_Suction
$LGCMOD SLD_Suction

// Rung SLD_Suction#1
// Offset 0
STR SLD_Program.S3
OUT Y31

// Rung SLD_Suction#2
// Offset 2
RET

// End of Code Block SLD_Suction
$LGCEND SLD_Suction

// Beginning of Code Block All_Copy_States
$LGCMOD All_Copy_States

// Rung All_Copy_States#1
// Offset 0
STR ST1
COPY 0x1 "4 0x0 MC1000 C2000 1 0x0 MC56 C56 1"

// Rung All_Copy_States#2
// Offset 9
STR C2000
RST C2001

// Rung All_Copy_States#3
// Offset 11
STRN C2000
SET C2001
COPY 0x1 "4 0x0 0 MC56 1"
CALL VGR_Reset_Flags 0x1 DST511 "3" "3"

// Rung All_Copy_States#4
// Offset 25
STR ST1
CALL HBW_Copy_State_F 0x1 DST511 "3" "3"

// Rung All_Copy_States#5
// Offset 33
STR ST1
CALL MPO_Copy_State 0x1 DST511 "3" "3"

// Rung All_Copy_States#6
// Offset 41
STR ST1
CALL SLD_Copy_State 0x1 DST511 "3" "3"

// Rung All_Copy_States#7
// Offset 49
STR ST1
CALL SSC_Copy_State 0x1 DST511 "3" "3"

// Rung All_Copy_States#8
// Offset 57
STR ST1
CALL VGR_Copy_State_F 0x1 DST511 "3" "3"

// Rung All_Copy_States#9
// Offset 65
RET

// End of Code Block All_Copy_States
$LGCEND All_Copy_States

// Beginning of Code Block SSC_Copy_State
$LGCMOD SSC_Copy_State

// Rung SSC_Copy_State#1
// Offset 0
STR ST1
COPY 0x1 "4 0x0 Y35 MI600 1 0x0 Y36 MI601 1 0x0 Y37 MI602 1 0x0 Y38 MI603 1 0x0 Y39 MI604 1 0x0 Y40 MI605 1 0x0 Y41 MI606 1 0x0 Y42 MI607 1 0x0 X40 MI610 1 0x0 X41 MI611 1 0x0 X42 MI612 1 0x0 X43 MI613 1 0x0 V2400 MHR1200 1 0x0 X44 MI615 1 0x0 X45 MI616 1 0x0 X46 MI617 1 0x0 X47 MI618 1"

// Rung SSC_Copy_State#2
// Offset 39
STR ST1
SUBSCRIB "4 WX1 V2400 1 0x4"

// Rung SSC_Copy_State#3
// Offset 44
STR C2001
DUPBOOL
AND ST1
COPY 0x1 "4 0x0 MC600 C1200 8"
POPBOOL
AND X40
COPY 0x1 "4 0x0 0 MC601 1"

// Rung SSC_Copy_State#4
// Offset 61
STR C2000
COPY 0x1 "4 0x0 0 MC600 8"

// Rung SSC_Copy_State#5
// Offset 68
RET

// End of Code Block SSC_Copy_State
$LGCEND SSC_Copy_State

// Beginning of Code Block HBW_get_X_Z
$LGCMOD HBW_get_X_Z

// Rung HBW_get_X_Z#1
// Offset 0
NOP

// Rung HBW_get_X_Z#2
// Offset 1
#BEGIN FMT_COMMENT 
"Get Column, right digit"
#END

STR ST1
MATH N201 "N200 % 10"

// Rung HBW_get_X_Z#3
// Offset 10
#BEGIN FMT_COMMENT 
"Get Row, left digit"
#END

STR ST1
MATH N202 "(N200 - N201) / 10"

// Rung HBW_get_X_Z#4
// Offset 21
#BEGIN FMT_COMMENT 
"X Output Encoder Value"
#END

STRE N201 1
COPY 0x1 "4 0x0 7650 N203 1"

// Rung HBW_get_X_Z#5
// Offset 31
#BEGIN FMT_COMMENT 
"X Output Encoder Value"
#END

STRE N201 2
COPY 0x1 "4 0x0 5257 N203 1"

// Rung HBW_get_X_Z#6
// Offset 41
#BEGIN FMT_COMMENT 
"X Output Encoder Value"
#END

STRE N201 3
COPY 0x1 "4 0x0 2970 N203 1"

// Rung HBW_get_X_Z#7
// Offset 51
#BEGIN FMT_COMMENT 
"Z Output Encoder Value"
#END

STRE N202 1
COPY 0x1 "4 0x0 425 N204 1"

// Rung HBW_get_X_Z#8
// Offset 61
#BEGIN FMT_COMMENT 
"Z Output Encoder Value"
#END

STRE N202 2
COPY 0x1 "4 0x0 1750 N204 1"

// Rung HBW_get_X_Z#9
// Offset 71
#BEGIN FMT_COMMENT 
"Z Output Encoder Value"
#END

STRE N202 3
COPY 0x1 "4 0x0 3300 N204 1"

// Rung HBW_get_X_Z#10
// Offset 81
RET

// End of Code Block HBW_get_X_Z
$LGCEND HBW_get_X_Z

// Beginning of Code Block HBW_Manual_F
$LGCMOD HBW_Manual_F

// Rung HBW_Manual_F#1
// Offset 0
STR ST1
DUPBOOL
STRN C2
AND C1
STRN C1
AND C2
ORSTR
ANDSTR
PWMOUT @HBW_PWM_M1 $HBW_PWM_M1 Y80 500 60
POPBOOL
DUPBOOL
AND C1
OUT Y48
POPBOOL
AND C2
OUT Y49

// Rung HBW_Manual_F#2
// Offset 29
STR ST1
DUPBOOL
STRN C4
AND C3
STRN C3
AND C4
ANDN X0
ORSTR
ANDSTR
PWMOUT @HBW_PWM_M2 $HBW_PWM_M2 Y81 500 60
POPBOOL
DUPBOOL
AND C3
OUT Y50
POPBOOL
AND C4
ANDN X0
OUT Y51

// Rung HBW_Manual_F#3
// Offset 60
STR ST1
DUPBOOL
STRN C6
AND C5
ANDN X3
STRN C5
AND C6
ORSTR
ANDSTR
PWMOUT @HBW_PWM_M3 $HBW_PWM_M3 Y82 500 60
POPBOOL
DUPBOOL
AND C5
ANDN X3
OUT Y5
POPBOOL
AND C6
OUT Y4

// Rung HBW_Manual_F#4
// Offset 91
STR ST1
DUPBOOL
STRN C8
AND C7
ANDN X10
STRN C7
AND C8
ANDN X11
ORSTR
ANDSTR
PWMOUT @HBW_PWM_M4 $HBW_PWM_M4 Y83 500 60
POPBOOL
DUPBOOL
AND C7
ANDN X10
OUT Y6
POPBOOL
AND C8
ANDN X11
OUT Y7

// Rung HBW_Manual_F#5
// Offset 124
RET

// End of Code Block HBW_Manual_F
$LGCEND HBW_Manual_F

// Beginning of Code Block MPO_Manual
$LGCMOD MPO_Manual

// Rung MPO_Manual#1
// Offset 0
STR C800
ANDN X13
OUT Y45

// Rung MPO_Manual#2
// Offset 3
STR C801
ANDN X12
OUT Y46

// Rung MPO_Manual#3
// Offset 6
STR C802
OUT Y47

// Rung MPO_Manual#4
// Offset 8
STR C803
OUT Y43

// Rung MPO_Manual#5
// Offset 10
STR C804
AND Y20
ANDN X17
OUT Y44

// Rung MPO_Manual#6
// Offset 14
STR C805
AND Y20
ANDN X18
OUT Y52

// Rung MPO_Manual#7
// Offset 18
STR ST1
DUPBOOL
STRN C807
AND C806
ANDN X19
STRN C806
AND C807
ANDN X16
ORSTR
ANDSTR
PWMOUT @MPO_PWM_M5 $MPO_PWM_M5 Y91 500 60
POPBOOL
DUPBOOL
AND C806
ANDN X19
OUT Y53
POPBOOL
AND C807
ANDN X16
OUT Y15

// Rung MPO_Manual#8
// Offset 51
STR C808
OUT Y16

// Rung MPO_Manual#9
// Offset 53
STR C809
OUT Y17

// Rung MPO_Manual#10
// Offset 55
STR C810
OUT Y18

// Rung MPO_Manual#11
// Offset 57
STR C811
OUT Y19

// Rung MPO_Manual#12
// Offset 59
STR C812
OUT Y20

// Rung MPO_Manual#13
// Offset 61
STR C813
OUT Y21

// Rung MPO_Manual#14
// Offset 63
RET

// End of Code Block MPO_Manual
$LGCEND MPO_Manual

// Beginning of Code Block SLD_Manual
$LGCMOD SLD_Manual

// Rung SLD_Manual#1
// Offset 0
STR C1600
OUT Y30

// Rung SLD_Manual#2
// Offset 2
STR C1601
OUT Y31

// Rung SLD_Manual#3
// Offset 4
STR C1602
OUT Y32

// Rung SLD_Manual#4
// Offset 6
STR C1603
OUT Y33

// Rung SLD_Manual#5
// Offset 8
STR C1604
OUT Y34

// Rung SLD_Manual#6
// Offset 10
RET

// End of Code Block SLD_Manual
$LGCEND SLD_Manual

// Beginning of Code Block HBW_Copy_State_F
$LGCMOD HBW_Copy_State_F

// Rung HBW_Copy_State_F#1
// Offset 0
STR ST1
AND C2000
COPY 0x1 "4 0x0 MC1 C1 27 0x0 X6 MI7 4"

// Rung HBW_Copy_State_F#2
// Offset 12
NOP

// Rung HBW_Copy_State_F#3
// Offset 13
STR ST1
DUPBOOL
ANDN C56
AND HBW_Program.S97
COPY 0x1 "4 0x0 MHR1 N300 1 0x0 400 V400 1"
POPBOOL
DUPBOOL
ANDN C56
ANDN HBW_Program.S97
COPY 0x1 "4 0x0 0 MHR1 1"
POPBOOL
AND C56
COPY 0x1 "4 0x0 0 MHR1 1"

// Rung HBW_Copy_State_F#4
// Offset 43
#BEGIN FMT_COMMENT 
"Sensor data, and Auto/Manual switch<br>"
#END

STR ST1
AND C2001
COPY 0x1 "4 0x0 Y48 MI1 1 0x0 Y49 MI2 1 0x0 Y50 MI3 1 0x0 Y51 MI4 1 0x0 Y4 MI5 1 0x0 Y5 MI6 1 0x0 Y6 MI7 1 0x0 Y7 MI8 1 0x0 Y80 MI9 1 0x0 Y81 MI10 1 0x0 Y82 MI11 1 0x0 Y83 MI12 1 0x0 X0 MI13 1 0x0 X1 MI14 1 0x0 X2 MI15 1 0x0 X3 MI16 1 0x0 X4 MI17 1 0x0 X5 MI18 1 0x0 X6 MI19 1 0x0 X7 MI20 1 0x0 X8 MI21 1 0x0 X9 MI22 1 0x0 X10 MI23 1 0x0 X11 MI24 1 0x0 0 MHR1 1"
RST C300

// Rung HBW_Copy_State_F#5
// Offset 100
#BEGIN FMT_COMMENT 
"Manual mode enabled. Coil data is copied from the switch "
"position on the HMI<br> <br>"
"Sends a 0 to the Modbus coil output to disable the switch "
"for reference switches"
#END

STR C2001
DUPBOOL
AND ST1
COPY 0x1 "4 0x0 MC1 C1 8"
POPBOOL
DUPBOOL
AND X0
COPY 0x1 "4 0x0 0 MC4 1"
POPBOOL
DUPBOOL
AND X3
COPY 0x1 "4 0x0 0 MC5 1"
POPBOOL
DUPBOOL
AND X10
COPY 0x1 "4 0x0 0 MC7 1"
POPBOOL
AND X11
COPY 0x1 "4 0x0 0 MC8 1"

// Rung HBW_Copy_State_F#6
// Offset 141
#BEGIN FMT_COMMENT 
"Auto mode enabled. This turns off all coils on the HMI."
#END

STR C2000
COPY 0x1 "4 0x0 0 MC1 8"

// Rung HBW_Copy_State_F#7
// Offset 148
RET

// End of Code Block HBW_Copy_State_F
$LGCEND HBW_Copy_State_F

// Beginning of Code Block HBW_lift_seq
$LGCMOD HBW_lift_seq

// Rung HBW_lift_seq#1
// Offset 0
#BEGIN FMT_COMMENT 
"LIFT Sequence"
#END

STR ST1
OUT $HBW_Encoder_Z.EnableCapture

// Rung HBW_lift_seq#2
// Offset 2
STRN X10
ANDN C201
OUT Y6

// Rung HBW_lift_seq#3
// Offset 5
STR X10
OUT C200

// Rung HBW_lift_seq#4
// Offset 7
STR ST1
MATH N203 "N202 - 400"

// Rung HBW_lift_seq#5
// Offset 16
STRLE $HBW_Encoder_Z.Acc N203
RST C200
OUT C201

// Rung HBW_lift_seq#6
// Offset 22
STRN X3
AND C200
OUT Y5

// Rung HBW_lift_seq#7
// Offset 25
STRN X11
AND C201
OUT Y7

// Rung HBW_lift_seq#8
// Offset 28
STR X11
AND C201
OUT C202
RST C200
RST C201

// Rung HBW_lift_seq#9
// Offset 33
NOP

// Rung HBW_lift_seq#10
// Offset 34
RET

// End of Code Block HBW_lift_seq
$LGCEND HBW_lift_seq

// Beginning of Code Block SSC_Manual
$LGCMOD SSC_Manual

// Rung SSC_Manual#1
// Offset 0
STR C1200
OUT Y35

// Rung SSC_Manual#2
// Offset 2
STR C1201
ANDN X40
OUT Y36

// Rung SSC_Manual#3
// Offset 5
STR C1202
OUT Y37

// Rung SSC_Manual#4
// Offset 7
STR C1203
OUT Y38

// Rung SSC_Manual#5
// Offset 9
STR C1204
OUT Y39

// Rung SSC_Manual#6
// Offset 11
STR C1205
OUT Y40

// Rung SSC_Manual#7
// Offset 13
STR C1206
OUT Y41

// Rung SSC_Manual#8
// Offset 15
STR C1207
OUT Y42

// Rung SSC_Manual#9
// Offset 17
RET

// End of Code Block SSC_Manual
$LGCEND SSC_Manual

// Beginning of Code Block VGR_Manual_F
$LGCMOD VGR_Manual_F

// Rung VGR_Manual_F#1
// Offset 0
STR ST1
DUPBOOL
STRN C401
AND C400
ANDN X25
STRN C400
AND C401
ORSTR
ANDSTR
PWMOUT @VGR_PWM_M1 $VGR_PWM_M1 Y88 500 60
POPBOOL
DUPBOOL
AND C400
ANDN X25
OUT Y22
POPBOOL
AND C401
OUT Y23

// Rung VGR_Manual_F#2
// Offset 31
STR ST1
DUPBOOL
STRN C403
AND C402
STRN C402
AND C403
ANDN X26
ORSTR
ANDSTR
PWMOUT @VGR_PWM_M2 $VGR_PWM_M2 Y89 500 60
POPBOOL
DUPBOOL
AND C402
OUT Y25
POPBOOL
AND C403
ANDN X26
OUT Y24

// Rung VGR_Manual_F#3
// Offset 62
STR ST1
DUPBOOL
STRN C405
AND C404
ANDN X27
STRN C404
AND C405
ORSTR
ANDSTR
PWMOUT @VGR_PWM_M3 $VGR_PWM_M3 Y90 500 60
POPBOOL
DUPBOOL
AND C404
ANDN X27
OUT Y26
POPBOOL
AND C405
OUT Y27

// Rung VGR_Manual_F#4
// Offset 93
STR C406
OUT Y28

// Rung VGR_Manual_F#5
// Offset 95
STR C407
OUT Y29

// Rung VGR_Manual_F#6
// Offset 97
RET

// End of Code Block VGR_Manual_F
$LGCEND VGR_Manual_F

// Beginning of Code Block HBW_load_convyr
$LGCMOD HBW_load_convyr

// Rung HBW_load_convyr#1
// Offset 0
NOP

// Rung HBW_load_convyr#2
// Offset 1
#BEGIN FMT_COMMENT 
"Horizontal PWM Motor"
#END

STRLE 80 $HBW_Encoder_X.Acc
PWMOUT @HBW_PWM_M2 $HBW_PWM_M2 Y81 150 R101

// Rung HBW_load_convyr#3
// Offset 19
#BEGIN FMT_COMMENT 
"Vertical PWM Motor"
#END

STRLE 2620 $HBW_Encoder_Z.Acc
ORGE 2580 $HBW_Encoder_Z.Acc
OR C200
PWMOUT @HBW_PWM_M3 $HBW_PWM_M3 Y82 500 R102

// Rung HBW_load_convyr#4
// Offset 42
#BEGIN FMT_COMMENT 
"Cantilever PWM Motor"
#END

STR ST1
PWMOUT @HBW_PWM_M4 $HBW_PWM_M4 Y83 50 R103

// Rung HBW_load_convyr#5
// Offset 57
STRN X10
ANDLE 2580 $HBW_Encoder_Z.Acc
ANDGE 2620 $HBW_Encoder_Z.Acc
ANDGE 80 $HBW_Encoder_X.Acc
OUT Y6

// Rung HBW_load_convyr#6
// Offset 71
#BEGIN FMT_COMMENT 
"Require Light sensor to go false to indicate cargo in "
"approximate location"
#END

STR X10
SET C200

// Rung HBW_load_convyr#7
// Offset 73
#BEGIN FMT_COMMENT 
"MOVE towards conveyor horizontal"
#END

STRLE 80 $HBW_Encoder_X.Acc
AND C204
OUT Y51

// Rung HBW_load_convyr#8
// Offset 79
#BEGIN FMT_COMMENT 
"Coming from rows 2 or 3 or for load sequnce when lift forward"
#END

STR C200
ANDGE 3000 $HBW_Encoder_Z.Acc
STRN C200
ANDGE 2580 $HBW_Encoder_Z.Acc
ANDN C204
ORSTR
OUT Y4

// Rung HBW_load_convyr#9
// Offset 92
STRN C200
ANDLE 2580 $HBW_Encoder_Z.Acc
ANDN C204
ANDGE 2620 $HBW_Encoder_Z.Acc
SET C204

// Rung HBW_load_convyr#10
// Offset 103
STR C200
ANDLE 3000 $HBW_Encoder_Z.Acc
SET C201
RST C200

// Rung HBW_load_convyr#11
// Offset 110
#BEGIN FMT_COMMENT 
"If coming from Row 3 need to rais lift before starting "
"load sequence"
#END

STRN C200
ANDLE 2620 $HBW_Encoder_Z.Acc
ANDN C204
OUT Y5

// Rung HBW_load_convyr#12
// Offset 117
STRN X11
AND C201
OUT Y7

// Rung HBW_load_convyr#13
// Offset 120
STR X11
AND C201
OUT C203
RST C201
RST C204

// Rung HBW_load_convyr#14
// Offset 125
NOP

// Rung HBW_load_convyr#15
// Offset 126
RET

// End of Code Block HBW_load_convyr
$LGCEND HBW_load_convyr

// Beginning of Code Block HBW_PWM_On
$LGCMOD HBW_PWM_On

// Rung HBW_PWM_On#1
// Offset 0
STR ST1
PWMOUT @HBW_PWM_M1 $HBW_PWM_M1 Y80 50 R100

// Rung HBW_PWM_On#2
// Offset 15
STR ST1
PWMOUT @HBW_PWM_M2 $HBW_PWM_M2 Y81 50 R101

// Rung HBW_PWM_On#3
// Offset 30
STR ST1
PWMOUT @HBW_PWM_M3 $HBW_PWM_M3 Y82 500 100

// Rung HBW_PWM_On#4
// Offset 45
STR ST1
PWMOUT @HBW_PWM_M4 $HBW_PWM_M4 Y83 50 R103

// Rung HBW_PWM_On#5
// Offset 60
RET

// End of Code Block HBW_PWM_On
$LGCEND HBW_PWM_On

// Beginning of Code Block HBW_Reset_Flags
$LGCMOD HBW_Reset_Flags

// Rung HBW_Reset_Flags#1
// Offset 0
STR ST1
COPY 0x1 "4 0x0 0 C100 5 0x0 0 C200 15"

// Rung HBW_Reset_Flags#2
// Offset 9
NOP

// Rung HBW_Reset_Flags#3
// Offset 10
NOP

// Rung HBW_Reset_Flags#4
// Offset 11
RET

// End of Code Block HBW_Reset_Flags
$LGCEND HBW_Reset_Flags

// Beginning of Code Block HBW_rst_switches
$LGCMOD HBW_rst_switches

// Rung HBW_rst_switches#1
// Offset 0
STR ST1
OUT $HBW_Encoder_X.EnableCapture

// Rung HBW_rst_switches#2
// Offset 2
STR ST1
OUT $HBW_Encoder_Z.EnableCapture

// Rung HBW_rst_switches#3
// Offset 4
STR X0
OUT $HBW_Encoder_X.ResetLevel

// Rung HBW_rst_switches#4
// Offset 6
STR X3
OUT $HBW_Encoder_Z.ResetLevel

// Rung HBW_rst_switches#5
// Offset 8
NOP

// Rung HBW_rst_switches#6
// Offset 9
RET

// End of Code Block HBW_rst_switches
$LGCEND HBW_rst_switches

// Beginning of Code Block HBW_Unload_Conv
$LGCMOD HBW_Unload_Conv

// Rung HBW_Unload_Conv#1
// Offset 0
STRN X10
ANDLE 2980 $HBW_Encoder_Z.Acc
ANDGE 3030 $HBW_Encoder_Z.Acc
ANDGE 40 $HBW_Encoder_X.Acc
OUT Y6

// Rung HBW_Unload_Conv#2
// Offset 14
#BEGIN FMT_COMMENT 
"Require Light sensor to go false to indicate cargo in "
"approximate location"
#END

STR X10
SET C200

// Rung HBW_Unload_Conv#3
// Offset 16
#BEGIN FMT_COMMENT 
"MOVE towards conveyor horizontal"
#END

STRLE 40 $HBW_Encoder_X.Acc
AND C204
OUT Y51

// Rung HBW_Unload_Conv#4
// Offset 22
#BEGIN FMT_COMMENT 
"Coming from rows 2 or 3 or for load sequnce when lift forward"
#END

STR C200
ANDLE 2620 $HBW_Encoder_Z.Acc
STRN C200
ANDLE 3030 $HBW_Encoder_Z.Acc
ANDN C204
ORSTR
OUT Y5

// Rung HBW_Unload_Conv#5
// Offset 35
STRN C200
ANDLE 2980 $HBW_Encoder_Z.Acc
ANDN C204
ANDGE 3030 $HBW_Encoder_Z.Acc
SET C204

// Rung HBW_Unload_Conv#6
// Offset 46
STR C200
ANDGE 2620 $HBW_Encoder_Z.Acc
SET C201
RST C200

// Rung HBW_Unload_Conv#7
// Offset 53
#BEGIN FMT_COMMENT 
"If coming from Row 3 need to rais lift before starting "
"load sequence"
#END

STRN C200
ANDGE 2980 $HBW_Encoder_Z.Acc
ANDN C204
OUT Y4

// Rung HBW_Unload_Conv#8
// Offset 60
STRN X11
AND C201
OUT Y7

// Rung HBW_Unload_Conv#9
// Offset 63
STR X11
AND C201
OUT C205
RST C201
RST C204

// Rung HBW_Unload_Conv#10
// Offset 68
NOP

// Rung HBW_Unload_Conv#11
// Offset 69
NOP

// Rung HBW_Unload_Conv#12
// Offset 70
RET

// End of Code Block HBW_Unload_Conv
$LGCEND HBW_Unload_Conv

// Beginning of Code Block HBW_Unload_Rack
$LGCMOD HBW_Unload_Rack

// Rung HBW_Unload_Rack#1
// Offset 0
#BEGIN FMT_COMMENT 
"LIFT Sequence"
#END

STR ST1
OUT $HBW_Encoder_Z.EnableCapture

// Rung HBW_Unload_Rack#2
// Offset 2
STRN X10
ANDN C201
OUT Y6

// Rung HBW_Unload_Rack#3
// Offset 5
STR X10
SET C200

// Rung HBW_Unload_Rack#4
// Offset 7
STR ST1
MATH N203 "N202 + 400"

// Rung HBW_Unload_Rack#5
// Offset 16
STRGE $HBW_Encoder_Z.Acc N203
RST C200
OUT C201

// Rung HBW_Unload_Rack#6
// Offset 22
STR C200
OUT Y4

// Rung HBW_Unload_Rack#7
// Offset 24
STRN X11
AND C201
OUT Y7

// Rung HBW_Unload_Rack#8
// Offset 27
STR X11
AND C201
OUT C202
RST C200
RST C201

// Rung HBW_Unload_Rack#9
// Offset 32
NOP

// Rung HBW_Unload_Rack#10
// Offset 33
NOP

// Rung HBW_Unload_Rack#11
// Offset 34
RET

// End of Code Block HBW_Unload_Rack
$LGCEND HBW_Unload_Rack

// Beginning of Code Block VGR_vacuum_drop
$LGCMOD VGR_vacuum_drop

// Rung VGR_vacuum_drop#1
// Offset 0
STR ST1
CALL VGR_PWM_ON 0x1 DST511 "3" "3"

// Rung VGR_vacuum_drop#2
// Offset 8
#BEGIN FMT_COMMENT 
"Get target Y-location and return location"
#END

STRN C610
MATH N1002 "$VGR_Encoder_Y.Acc + N1000"
SET C611
MATH N1001 "$VGR_Encoder_Y.Acc + 15"
SET C610

// Rung VGR_vacuum_drop#3
// Offset 27
STRLE $VGR_Encoder_Y.Acc N1002
AND C611
OUT Y23

// Rung VGR_vacuum_drop#4
// Offset 33
#BEGIN FMT_COMMENT 
"Return to starting height"
#END

STR C612
ANDGE $VGR_Encoder_Y.Acc N1001
OUT Y22

// Rung VGR_vacuum_drop#5
// Offset 39
#BEGIN FMT_COMMENT 
"Turn off vacuum, this is run in VGR program, so no need to "
"run in this submodule"
#END

STRGE $VGR_Encoder_Y.Acc N1002
RST C550
RST C611
SET C612

// Rung VGR_vacuum_drop#6
// Offset 46
#BEGIN FMT_COMMENT 
"Starting height reached, nice job you've finished picking "
"up puck"
#END

STR C612
ANDLE $VGR_Encoder_Y.Acc N1001
SET C613

// Rung VGR_vacuum_drop#7
// Offset 52
NOP

// Rung VGR_vacuum_drop#8
// Offset 53
NOP

// Rung VGR_vacuum_drop#9
// Offset 54
RET

// End of Code Block VGR_vacuum_drop
$LGCEND VGR_vacuum_drop

// Beginning of Code Block VGR_dropoff
$LGCMOD VGR_dropoff

// Rung VGR_dropoff#1
// Offset 0
STR ST1
AND ST2
COPY 0x1 "4 0x0 450 N1005 1 0x0 420 N1006 1 0x0 268 N1007 1 0x0 298 N1008 1 0x0 2320 N1009 1"

// Rung VGR_dropoff#2
// Offset 16
STR X25
SET C600

// Rung VGR_dropoff#3
// Offset 18
#BEGIN FMT_COMMENT 
"Start by moving motor all the way up for safe travel "
"throughout the factory."
#END

STRN C600
OUT Y22

// Rung VGR_dropoff#4
// Offset 20
#BEGIN FMT_COMMENT 
"Bring back horizontal arm to home position if needed to "
"keep from colliding with the conveyor roof"
#END

STR C600
ANDN C601
OUT Y24

// Rung VGR_dropoff#5
// Offset 23
STR X26
SET C601

// Rung VGR_dropoff#6
// Offset 25
STR C601
ANDGE $VGR_Encoder_Rot.Acc N1005
OUT Y26

// Rung VGR_dropoff#7
// Offset 31
STR C601
ANDLE $VGR_Encoder_Rot.Acc N1006
OUT Y27

// Rung VGR_dropoff#8
// Offset 37
STRGE $VGR_Encoder_Rot.Acc N1006
ANDLE $VGR_Encoder_Rot.Acc N1005
SET C602

// Rung VGR_dropoff#9
// Offset 46
STR C602
ANDLE $VGR_Encoder_X.Acc N1007
ANDN C604
ANDN C605
OUT Y25

// Rung VGR_dropoff#10
// Offset 54
STRGE $VGR_Encoder_X.Acc N1007
ANDLE $VGR_Encoder_X.Acc N1008
SET C603

// Rung VGR_dropoff#11
// Offset 63
STR C603
CALL VGR_vacuum_drop 0x1 DST511 "3 N1009 N1000 1" "3 C613 C604 1"

// Rung VGR_dropoff#12
// Offset 75
STR C604
ANDN X26
OUT Y24

// Rung VGR_dropoff#13
// Offset 78
#BEGIN FMT_COMMENT 
"Calling this done for this submodule, ready to move with "
"item to any location in the factory."
#END

STR C604
AND X26
SET C605

// Rung VGR_dropoff#14
// Offset 81
NOP

// Rung VGR_dropoff#15
// Offset 82
RET

// End of Code Block VGR_dropoff
$LGCEND VGR_dropoff

// Beginning of Code Block VGR_home_reset
$LGCMOD VGR_home_reset

// Rung VGR_home_reset#1
// Offset 0
#BEGIN FMT_COMMENT 
"Go UP first as this is usually the safest direction to "
"travell for VGR"
#END

STRN X25
OUT Y22

// Rung VGR_home_reset#2
// Offset 2
STR X25
SET C600

// Rung VGR_home_reset#3
// Offset 4
#BEGIN FMT_COMMENT 
"Next bring arm X back to zero as this allows fro rotation "
"anywhere in the factor, even if MPO pickup is active"
#END

STR C600
ANDN X26
OUT Y24

// Rung VGR_home_reset#4
// Offset 7
STR X26
AND C600
ANDN C602
SET C601

// Rung VGR_home_reset#5
// Offset 11
#BEGIN FMT_COMMENT 
"Return to home position on rotation facing train depot"
#END

STR C601
ANDN X27
OUT Y26

// Rung VGR_home_reset#6
// Offset 14
#BEGIN FMT_COMMENT 
"C602 is the DONE flag for this function"
#END

STR X27
SET C602
RST C601

// Rung VGR_home_reset#7
// Offset 17
RET

// End of Code Block VGR_home_reset
$LGCEND VGR_home_reset

// Beginning of Code Block VGR_pickup
$LGCMOD VGR_pickup

// Rung VGR_pickup#1
// Offset 0
STR ST1
AND ST2
COPY 0x1 "4 0x0 50 N1005 1 0x0 20 N1006 1 0x0 40 N1007 1 0x0 70 N1008 1 0x0 2350 N1009 1"

// Rung VGR_pickup#2
// Offset 16
STR X25
SET C600

// Rung VGR_pickup#3
// Offset 18
#BEGIN FMT_COMMENT 
"Start by moving motor all the way up for safe travel "
"throughout the factory."
#END

STRN C600
OUT Y22

// Rung VGR_pickup#4
// Offset 20
#BEGIN FMT_COMMENT 
"Bring back horizontal arm to home position if needed to "
"keep from colliding with the conveyor roof"
#END

STR C600
ANDN C601
OUT Y24

// Rung VGR_pickup#5
// Offset 23
STR X26
SET C601

// Rung VGR_pickup#6
// Offset 25
STR C601
ANDGE $VGR_Encoder_Rot.Acc N1005
OUT Y26

// Rung VGR_pickup#7
// Offset 31
STR C601
ANDLE $VGR_Encoder_Rot.Acc N1006
OUT Y27

// Rung VGR_pickup#8
// Offset 37
STRGE $VGR_Encoder_Rot.Acc N1006
ANDLE $VGR_Encoder_Rot.Acc N1005
SET C602

// Rung VGR_pickup#9
// Offset 46
STR C602
ANDLE $VGR_Encoder_X.Acc N1007
ANDN C604
ANDN C605
OUT Y25

// Rung VGR_pickup#10
// Offset 54
STRGE $VGR_Encoder_X.Acc N1007
ANDLE $VGR_Encoder_X.Acc N1008
SET C603

// Rung VGR_pickup#11
// Offset 63
STR C603
CALL VGR_Suction_F 0x1 DST511 "3 N1009 N1000 1" "3 C613 C604 1"

// Rung VGR_pickup#12
// Offset 75
STR C604
ANDN X26
OUT Y24

// Rung VGR_pickup#13
// Offset 78
#BEGIN FMT_COMMENT 
"Calling this done for this submodule, ready to move with "
"item to any location in the factory."
#END

STR C604
AND X26
SET C605

// Rung VGR_pickup#14
// Offset 81
NOP

// Rung VGR_pickup#15
// Offset 82
NOP

// Rung VGR_pickup#16
// Offset 83
RET

// End of Code Block VGR_pickup
$LGCEND VGR_pickup

// Beginning of Code Block VGR_PWM_ON
$LGCMOD VGR_PWM_ON

// Rung VGR_PWM_ON#1
// Offset 0
STR ST1
PWMOUT @VGR_PWM_M1 $VGR_PWM_M1 Y88 150 R900

// Rung VGR_PWM_ON#2
// Offset 15
STR ST1
PWMOUT @VGR_PWM_M2 $VGR_PWM_M2 Y89 150 R901

// Rung VGR_PWM_ON#3
// Offset 30
STR ST1
PWMOUT @VGR_PWM_M3 $VGR_PWM_M3 Y90 150 R902

// Rung VGR_PWM_ON#4
// Offset 45
RET

// End of Code Block VGR_PWM_ON
$LGCEND VGR_PWM_ON

// Beginning of Code Block VGR_Reset_Flags
$LGCMOD VGR_Reset_Flags

// Rung VGR_Reset_Flags#1
// Offset 0
STR ST1
COPY 0x1 "4 0x0 0 C500 10 0x0 0 C600 20"

// Rung VGR_Reset_Flags#2
// Offset 9
NOP

// Rung VGR_Reset_Flags#3
// Offset 10
RET

// End of Code Block VGR_Reset_Flags
$LGCEND VGR_Reset_Flags

// Beginning of Code Block VGR_Rotate_To
$LGCMOD VGR_Rotate_To

// Rung VGR_Rotate_To#1
// Offset 0
STR ST1
MATH N1001 "N1000 - 15"
MATH N1002 "N1000 + 15"

// Rung VGR_Rotate_To#2
// Offset 17
#BEGIN FMT_COMMENT 
"Go UP first as this is usually the safest direction to "
"travell for VGR"
#END

STRN X25
OUT Y22

// Rung VGR_Rotate_To#3
// Offset 19
STR X25
SET C600

// Rung VGR_Rotate_To#4
// Offset 21
#BEGIN FMT_COMMENT 
"Next bring arm X back to zero as this allows fro rotation "
"anywhere in the factor, even if MPO pickup is active"
#END

STR C600
ANDN X26
OUT Y24

// Rung VGR_Rotate_To#5
// Offset 24
STR X26
AND C600
ANDN C602
SET C601

// Rung VGR_Rotate_To#6
// Offset 28
#BEGIN FMT_COMMENT 
"Safe rotation is now possible"
#END

STR C601
ANDLE $VGR_Encoder_Rot.Acc N1001
OUT Y27

// Rung VGR_Rotate_To#7
// Offset 34
#BEGIN FMT_COMMENT 
"Safe rotation is now possible"
#END

STR C601
ANDGE $VGR_Encoder_Rot.Acc N1002
OUT Y26

// Rung VGR_Rotate_To#8
// Offset 40
#BEGIN FMT_COMMENT 
"Desired Rotation Reached, C602 is DONE flag for this function"
#END

STRLE $VGR_Encoder_Rot.Acc N1002
ANDGE $VGR_Encoder_Rot.Acc N1001
AND C601
SET C602

// Rung VGR_Rotate_To#9
// Offset 50
RET

// End of Code Block VGR_Rotate_To
$LGCEND VGR_Rotate_To

// Beginning of Code Block VGR_rst_switches
$LGCMOD VGR_rst_switches

// Rung VGR_rst_switches#1
// Offset 0
STR ST1
OUT $VGR_Encoder_Rot.EnableCapture

// Rung VGR_rst_switches#2
// Offset 2
STR ST1
OUT $VGR_Encoder_X.EnableCapture

// Rung VGR_rst_switches#3
// Offset 4
STR ST1
OUT $VGR_Encoder_Y.EnableCapture

// Rung VGR_rst_switches#4
// Offset 6
NOP

// Rung VGR_rst_switches#5
// Offset 7
STR X25
OUT $VGR_Encoder_Y.ResetLevel

// Rung VGR_rst_switches#6
// Offset 9
STR X26
OUT $VGR_Encoder_X.ResetLevel

// Rung VGR_rst_switches#7
// Offset 11
STR X27
OUT $VGR_Encoder_Rot.ResetLevel

// Rung VGR_rst_switches#8
// Offset 13
RET

// End of Code Block VGR_rst_switches
$LGCEND VGR_rst_switches

// Beginning of Code Block PWM_ramp_UP
$LGCMOD PWM_ramp_UP

// Rung PWM_ramp_UP#1
// Offset 0
NOP

// Rung PWM_ramp_UP#2
// Offset 1
STR ST1
INC D1000

// Rung PWM_ramp_UP#3
// Offset 3
STR ST1
MATH R1000 "(((R1002 - R1001) * D1000) / D1001) + R1001"

// Rung PWM_ramp_UP#4
// Offset 18
RET

// End of Code Block PWM_ramp_UP
$LGCEND PWM_ramp_UP

// Beginning of Code Block $tFirstScan
$TSK $tFirstScan

// Rung $tFirstScan#1
// Offset 0
NOP

// Rung $tFirstScan#2
// Offset 1
#BEGIN FMT_COMMENT 
"Variables only initialized once"
#END

STR ST1
INIT "3 N800 N1599 0 MHR1 ST1023 0 C1 C799 0 R100 R100 40 R101 R101 90 R102 R102 60 R103 R103 55 R900 R900 90 R901 R901 90 R902 R902 50"

// Rung $tFirstScan#3
// Offset 33
STR ST1
INIT "3 V400 ST1023 400 N400 ST1023 11 N401 ST1023 12 N402 ST1023 13 N403 ST1023 21 N404 ST1023 22 N405 ST1023 23 N406 ST1023 31 N407 ST1023 32 N408 ST1023 33"

// Rung $tFirstScan#4
// Offset 57
STR ST1
CALL VGR_Reset_Flags 0x1 DST511 "3" "3"

// End of Code Block $tFirstScan
$TSKEND $tFirstScan

// Beginning of Code Block $Main
$PRGRM $Main

// Rung $Main#1
// Offset 0
#BEGIN FMT_COMMENT 
"Mini Factory Spring 2022 Project For CS 453/454/553/554 "
"Advanced Robotics I and II<br> <br>Date 02/14/22"
#END

NOP

// Rung $Main#2
// Offset 1
#BEGIN FMT_COMMENT 
"Call all copy_states"
#END

STR ST1
CALL All_Copy_States 0x1 DST511 "3" "3"

// Rung $Main#3
// Offset 9
STR ST1
AND C2000
RUN HBW_Program

// Rung $Main#4
// Offset 13
STR ST1
STR C2001
ORPD C2000
ANDSTR
CALL HBW_Manual_F 0x1 DST511 "3" "3"

// Rung $Main#5
// Offset 25
#BEGIN FMT_COMMENT 
"Run VGR_Program"
#END

STR ST1
AND C2000
RUN VGR_Program

// Rung $Main#6
// Offset 29
STR ST1
STR C2001
ORPD C2000
ANDSTR
CALL VGR_Manual_F 0x1 DST511 "3" "3"

// Rung $Main#7
// Offset 41
#BEGIN FMT_COMMENT 
"Run MPO_Program"
#END

STR ST1
AND C2000
RUN MPO_Program

// Rung $Main#8
// Offset 45
STR ST1
STR C2001
ORPD C2000
ANDSTR
CALL MPO_Manual 0x1 DST511 "3" "3"

// Rung $Main#9
// Offset 57
#BEGIN FMT_COMMENT 
"Run SSC_Program"
#END

STR ST1
AND C2000
RUN SSC_Program

// Rung $Main#10
// Offset 61
STR ST1
STR C2001
ORPD C2000
ANDSTR
CALL SSC_Manual 0x1 DST511 "3" "3"

// Rung $Main#11
// Offset 73
#BEGIN FMT_COMMENT 
"Run SLD_Program"
#END

STR ST1
AND C2000
RUN SLD_Program

// Rung $Main#12
// Offset 77
STR ST1
STR C2001
ORPD C2000
ANDSTR
CALL SLD_Manual 0x1 DST511 "3" "3"

// End of Code Block $Main
$PGMEND $Main

// Beginning of Code Block VGR_Program
$PRGRM VGR_Program

// Rung VGR_Program#1
// Offset 0
#BEGIN FMT_COMMENT 
"SLD Program<br>"
#END

STR C2001
EXIT

// Rung VGR_Program#2
// Offset 2
STR ST1
CALL VGR_Copy_State_F 0x1 DST511 "3" "3"

// Rung VGR_Program#3
// Offset 10
STR ST1
CALL VGR_rst_switches 0x1 DST511 "3" "3"

// Rung VGR_Program#4
// Offset 18
STR ST1
CALL VGR_PWM_ON 0x1 DST511 "3" "3"

// Rung VGR_Program#5
// Offset 26
#BEGIN FMT_COMMENT 
"Have on for duration of function"
#END

STR C550
OUT Y29

// Rung VGR_Program#6
// Offset 28
#BEGIN FMT_COMMENT 
"Home position at program start, up, back rotation safest order"
#END

SG VGR_Program.S99

// Rung VGR_Program#7
// Offset 30
STR ST1
AND ST2
JMP VGR_Program.S100

// Rung VGR_Program#8
// Offset 33
STR ST1
CALL VGR_home_reset 0x1 DST511 "3" "3 C602 C500 1"

// Rung VGR_Program#9
// Offset 43
STR C500
JMP VGR_Program.S7
CALL VGR_Reset_Flags 0x1 DST511 "3" "3"

// Rung VGR_Program#10
// Offset 52
SG VGR_Program.S7

// Rung VGR_Program#11
// Offset 54
STR C300
JMP VGR_Program.S0
CALL VGR_Reset_Flags 0x1 DST511 "3" "3"

// Rung VGR_Program#12
// Offset 63
STR C39
JMP VGR_Program.S11
CALL VGR_Reset_Flags 0x1 DST511 "3" "3"

// Rung VGR_Program#13
// Offset 72
NOP

// Rung VGR_Program#14
// Offset 73
#BEGIN FMT_COMMENT 
"Pickup material from HBW"
#END

SG VGR_Program.S0

// Rung VGR_Program#15
// Offset 75
STR C300
CALL VGR_pickup 0x1 DST511 "3 5370 N1005 1 5310 N1006 1 730 N1007 1 895 N1008 1 545 N1009 1" "3 C605 C500 1"

// Rung VGR_Program#16
// Offset 95
STR C500
JMP VGR_Program.S1
CALL VGR_Reset_Flags 0x1 DST511 "3" "3"
RST C300

// Rung VGR_Program#17
// Offset 105
#BEGIN FMT_COMMENT 
"Dropoff Raw material at MPO station"
#END

SG VGR_Program.S1

// Rung VGR_Program#18
// Offset 107
STR ST1
CALL VGR_dropoff 0x1 DST511 "3 3500 N1005 1 3490 N1006 1 3300 N1007 1 3330 N1008 1 2000 N1009 1" "3 C605 C500 1"

// Rung VGR_Program#19
// Offset 127
STR C500
JMP VGR_Program.S7
CALL VGR_Reset_Flags 0x1 DST511 "3" "3"
SET C701

// Rung VGR_Program#20
// Offset 137
SG VGR_Program.S11

// Rung VGR_Program#21
// Offset 139
STR ST1
CALL VGR_Rotate_To 0x1 DST511 "3 2500 N1000 1" "3 C601 C500 1"

// Rung VGR_Program#22
// Offset 151
STR C500
JMP VGR_Program.S7
CALL VGR_Reset_Flags 0x1 DST511 "3" "3"
RST C39

// Rung VGR_Program#23
// Offset 161
SG VGR_Program.S20

// Rung VGR_Program#24
// Offset 163
NOP

// Rung VGR_Program#25
// Offset 164
NOP

// Rung VGR_Program#26
// Offset 165
STRPD C409
AND ST2
INIT "3 N800 ST1023 1 N801 ST1023 1000"

// Rung VGR_Program#27
// Offset 175
STR ST1
CALL VGR_Copy_State_F 0x1 DST511 "3" "3"

// Rung VGR_Program#28
// Offset 183
#BEGIN FMT_COMMENT 
"Accelerate from min/max PWM rate per sub_routine"
#END

STR C409
ANDLE N800 N801
CALL PWM_ramp_UP 0x1 DST511 "3 N800 N1000 2 20.0 R1001 1 50.0 R1002 1" "3 R1000 R800 1 N1000 N800 1"

// Rung VGR_Program#29
// Offset 208
#BEGIN FMT_COMMENT 
"Vertical PWM"
#END

STR C409
OR C410
PWMOUT @VGR_PWM_M1 $VGR_PWM_M1 Y88 150 R800
OUT Y88

// Rung VGR_Program#30
// Offset 225
#BEGIN FMT_COMMENT 
"vertical UP"
#END

STR C409
AND Y88
ANDN CT50.Done
OUT Y22

// Rung VGR_Program#31
// Offset 229
#BEGIN FMT_COMMENT 
"vertical DOWN"
#END

STR C410
AND Y88
ANDN CT50.Done
OUT Y23

// Rung VGR_Program#32
// Offset 233
NOP

// Rung VGR_Program#33
// Offset 234
SG VGR_Program.S100

// Rung VGR_Program#34
// Offset 236
NOP

// Rung VGR_Program#35
// Offset 237
STR ST1
AND ST2
OUT Y15

// End of Code Block VGR_Program
$PGMEND VGR_Program

// Beginning of Code Block MPO_Program
$PRGRM MPO_Program

// Rung MPO_Program#1
// Offset 0
#BEGIN FMT_COMMENT 
"MPO Program"
#END

STR C2001
EXIT

// Rung MPO_Program#2
// Offset 2
#BEGIN FMT_COMMENT 
"Handle Suction for the reset oven Stage"
#END

STR ST1
STR C2000
ORPD C2001
ANDSTR
CALL MPO_Suction 0x1 DST511 "3" "3"

// Rung MPO_Program#3
// Offset 14
STR C842
SGRSTR MPO_Program.S1 MPO_Program.S19
SGSET MPO_Program.S0
COPY 0x1 "4 0x0 0 MC442 1"

// Rung MPO_Program#4
// Offset 23
STR MPO_Program.S1
AND MPO_Program.S2
AND MPO_Program.S3
ANDN MPO_Program.S12
SET C841

// Rung MPO_Program#5
// Offset 28
SG MPO_Program.S0

// Rung MPO_Program#6
// Offset 30
RST C900

// Rung MPO_Program#7
// Offset 31
STR ST1
AND C2000
ANDN MPO_Program.S1
ANDN MPO_Program.S2
ANDN MPO_Program.S3
SGDIVRG "1 MPO_Program.S1 MPO_Program.S2 MPO_Program.S3"
RST C900
RST C901
RST Y18
SET C841

// Rung MPO_Program#8
// Offset 44
SG MPO_Program.S1

// Rung MPO_Program#9
// Offset 46
#BEGIN FMT_COMMENT 
"Open door and enable the ondelay timer for the feeder extension"
#END

STRN X18
ONDTMR T0 1000 Y52

// Rung MPO_Program#10
// Offset 50
STRN X24
JMP MPO_Program.S4
RST C841

// Rung MPO_Program#11
// Offset 53
SG MPO_Program.S4

// Rung MPO_Program#12
// Offset 55
#BEGIN FMT_COMMENT 
"Open door and enable the ondelay timer for the feeder extension"
#END

STRN X17
ONDTMR T1 3000 Y44

// Rung MPO_Program#13
// Offset 59
STR X17
JMP MPO_Program.S7

// Rung MPO_Program#14
// Offset 61
SG MPO_Program.S7

// Rung MPO_Program#15
// Offset 63
TMRDOWN T2 5000
OUT Y16

// Rung MPO_Program#16
// Offset 66
STR T2.Done
JMP MPO_Program.S10

// Rung MPO_Program#17
// Offset 68
SG MPO_Program.S10

// Rung MPO_Program#18
// Offset 70
STRN X18
ONDTMR T5 1000 Y52

// Rung MPO_Program#19
// Offset 74
STR X18
AND MPO_Program.S11
TMRDOWN T3 1000

// Rung MPO_Program#20
// Offset 78
STR T3.Done
JMP MPO_Program.S1

// Rung MPO_Program#21
// Offset 80
SG MPO_Program.S2

// Rung MPO_Program#22
// Offset 82
STRN X16
PWMOUT @MPO_PWM_M5 $MPO_PWM_M5 Y91 500 90
OUT Y15

// Rung MPO_Program#23
// Offset 98
#BEGIN FMT_COMMENT 
"Move to the oven when the item is baking<br>"
#END

STR MPO_Program.S7
JMP MPO_Program.S5

// Rung MPO_Program#24
// Offset 100
SG MPO_Program.S5

// Rung MPO_Program#25
// Offset 102
STRN X19
AND C701
PWMOUT @MPO_PWM_M5 $MPO_PWM_M5 Y91 500 90
OUT Y53

// Rung MPO_Program#26
// Offset 119
STRN MPO_Program.S7
AND X19
JMP MPO_Program.S8

// Rung MPO_Program#27
// Offset 122
SG MPO_Program.S8

// Rung MPO_Program#28
// Offset 124
STR X18
TMRDOWN T6 1000
OUT Y19

// Rung MPO_Program#29
// Offset 128
STR T6.Done
SET Y18
JMP MPO_Program.S11

// Rung MPO_Program#30
// Offset 131
SG MPO_Program.S11

// Rung MPO_Program#31
// Offset 133
STRN X16
PWMOUT @MPO_PWM_M5 $MPO_PWM_M5 Y91 500 60
OUT Y15

// Rung MPO_Program#32
// Offset 149
STR MPO_Program.S3
AND X16
JMP MPO_Program.S13

// Rung MPO_Program#33
// Offset 152
SG MPO_Program.S13

// Rung MPO_Program#34
// Offset 154
STR X16
OUT Y19
TMRDOWN T4 1000

// Rung MPO_Program#35
// Offset 158
STR T4.Done
RST Y18
TMRDOWN T10 250

// Rung MPO_Program#36
// Offset 162
STR T10.Done
JMP MPO_Program.S2

// Rung MPO_Program#37
// Offset 164
SG MPO_Program.S3

// Rung MPO_Program#38
// Offset 166
STRN X12
OUT Y46

// Rung MPO_Program#39
// Offset 168
STRND MPO_Program.S13
SET C900

// Rung MPO_Program#40
// Offset 171
STR C900
TMRDOWN T9 1000

// Rung MPO_Program#41
// Offset 174
STR T9.Done
AND ST1
RST C900
JMP MPO_Program.S6

// Rung MPO_Program#42
// Offset 178
SG MPO_Program.S6

// Rung MPO_Program#43
// Offset 180
STRN X15
OUT Y45

// Rung MPO_Program#44
// Offset 182
STR X15
TMRDOWN T7 3000
OUT Y43

// Rung MPO_Program#45
// Offset 186
STR T7.Done
JMP MPO_Program.S9

// Rung MPO_Program#46
// Offset 188
SG MPO_Program.S9

// Rung MPO_Program#47
// Offset 190
STRN X13
OUT Y45

// Rung MPO_Program#48
// Offset 192
STR X13
TMRDOWN T8 1000
OUT Y21

// Rung MPO_Program#49
// Offset 196
STR T8.Done
JMP MPO_Program.S12

// Rung MPO_Program#50
// Offset 198
SG MPO_Program.S12

// Rung MPO_Program#51
// Offset 200
OUT Y47

// Rung MPO_Program#52
// Offset 201
STRN X14
SET C901

// Rung MPO_Program#53
// Offset 203
STR C901
AND C1706
JMP MPO_Program.S3
RST C901

// End of Code Block MPO_Program
$PGMEND MPO_Program

// Beginning of Code Block SLD_Program
$PRGRM SLD_Program

// Rung SLD_Program#1
// Offset 0
#BEGIN FMT_COMMENT 
"SLD Program<br>"
#END

STR C2001
EXIT

// Rung SLD_Program#2
// Offset 2
#BEGIN FMT_COMMENT 
"Handle Suction for the reset oven Stage"
#END

STR ST1
STR C2000
ORPD C2001
ANDSTR
CALL SLD_Suction 0x1 DST511 "3" "3"

// Rung SLD_Program#3
// Offset 14
NOP

// Rung SLD_Program#4
// Offset 15
SG SLD_Program.S0

// Rung SLD_Program#5
// Offset 17
STR C2000
ANDN SLD_Program.S4
JMP SLD_Program.S4
RST C1700
RST C1701
RST C1702
RST C1703
RST C1704
RST C1705
RST C1706
RST C1707
RST C1708
RST C1709
COPY 0x1 "4 0x0 30000 V3201 1"

// Rung SLD_Program#6
// Offset 36
SG SLD_Program.S4

// Rung SLD_Program#7
// Offset 38
STR C901
JMP SLD_Program.S1

// Rung SLD_Program#8
// Offset 40
SG SLD_Program.S1

// Rung SLD_Program#9
// Offset 42
OUT Y30

// Rung SLD_Program#10
// Offset 43
STRN X35
SET C1703

// Rung SLD_Program#11
// Offset 45
STR C1703
ANDPD X35
SET C1704

// Rung SLD_Program#12
// Offset 49
STRN X36
SET C1705

// Rung SLD_Program#13
// Offset 51
STRLE V3200 V3201
COPY 0x1 "4 0x0 V3200 V3201 1"

// Rung SLD_Program#14
// Offset 61
NOP

// Rung SLD_Program#15
// Offset 62
STR C1705
JMP SLD_Program.S2

// Rung SLD_Program#16
// Offset 64
NOP

// Rung SLD_Program#17
// Offset 65
SG SLD_Program.S2

// Rung SLD_Program#18
// Offset 67
STRGE V3201 18000
ANDLE V3201 21000
SET C1707

// Rung SLD_Program#19
// Offset 76
STRGE V3201 6000
ANDLE V3201 10000
SET C1708

// Rung SLD_Program#20
// Offset 85
STRGE V3201 21500
ANDLE V3201 25000
SET C1709

// Rung SLD_Program#21
// Offset 94
STR C1707
OR C1708
OR C1709
JMP SLD_Program.S3

// Rung SLD_Program#22
// Offset 98
SG SLD_Program.S3

// Rung SLD_Program#23
// Offset 100
STRN Y34
ANDN Y33
ANDN Y32
OUT Y30

// Rung SLD_Program#24
// Offset 104
STR C1705
ANDPD X36
SET C1706

// Rung SLD_Program#25
// Offset 108
STR C1706
AND C1708
ANDN MC450
SET C1701

// Rung SLD_Program#26
// Offset 112
STR C1706
AND C1708
OUT Y32

// Rung SLD_Program#27
// Offset 115
STR C1706
AND C1707
TMRDOWN T16 1100

// Rung SLD_Program#28
// Offset 119
STR T16.Done
ANDN MC450
SET C1700

// Rung SLD_Program#29
// Offset 122
STR T16.Done
OUT Y33

// Rung SLD_Program#30
// Offset 124
STR C1706
AND C1709
TMRDOWN T17 2200

// Rung SLD_Program#31
// Offset 128
STR T17.Done
ANDN MC450
SET C1702

// Rung SLD_Program#32
// Offset 131
STR T17.Done
OUT Y34

// Rung SLD_Program#33
// Offset 133
STR Y32
OR Y33
OR Y34
TMRDOWN T13 1000

// Rung SLD_Program#34
// Offset 138
STR T13.Done
JMP SLD_Program.S0

// End of Code Block SLD_Program
$PGMEND SLD_Program

// Beginning of Code Block SSC_Program
$PRGRM SSC_Program

// Rung SSC_Program#1
// Offset 0
#BEGIN FMT_COMMENT 
"SSC Program"
#END

NOP

// End of Code Block SSC_Program
$PGMEND SSC_Program

// Beginning of Code Block HBW_Program
$PRGRM HBW_Program

// Rung HBW_Program#1
// Offset 0
#BEGIN FMT_COMMENT 
"SLD Program<br>"
#END

STR C2001
EXIT

// Rung HBW_Program#2
// Offset 2
STR ST1
CALL HBW_Copy_State_F 0x1 DST511 "3" "3"

// Rung HBW_Program#3
// Offset 10
STR ST1
ANDNE N300 0
ANDN C56
CALL HBW_get_X_Z 0x1 DST511 "3 N300 N200 1" "3 N203 N101 1 N204 N102 1"

// Rung HBW_Program#4
// Offset 29
STR ST1
CALL HBW_PWM_On 0x1 DST511 "3" "3"

// Rung HBW_Program#5
// Offset 37
NOP

// Rung HBW_Program#6
// Offset 38
NOP

// Rung HBW_Program#7
// Offset 39
#BEGIN FMT_COMMENT 
"Return to home location, UP/Right to zero encoders at the "
"start of program.  Ideally should already be close to this "
"when program ended if not already there."
#END

SG HBW_Program.S99

// Rung HBW_Program#8
// Offset 41
STRN X11
OUT Y7

// Rung HBW_Program#9
// Offset 43
STR X11
SET C110

// Rung HBW_Program#10
// Offset 45
STRN X0
AND C110
OUT Y51

// Rung HBW_Program#11
// Offset 48
STRN X3
AND C110
OUT Y5

// Rung HBW_Program#12
// Offset 51
STR X0
AND C110
OUT $HBW_Encoder_X.ResetLevel

// Rung HBW_Program#13
// Offset 54
STR X3
AND C110
OUT $HBW_Encoder_Z.ResetLevel

// Rung HBW_Program#14
// Offset 57
STR X0
AND X3
JMP HBW_Program.S97
RST C110

// Rung HBW_Program#15
// Offset 61
NOP

// Rung HBW_Program#16
// Offset 62
#BEGIN FMT_COMMENT 
"WAIT for new input should get here at the beginning and "
"after finishing a loading sequence"
#END

SG HBW_Program.S97

// Rung HBW_Program#17
// Offset 64
STR C56
ANDGE V400 400
ANDLE V400 408
CALL HBW_get_X_Z 0x1 DST511 "3 N[V400] N200 1" "3 N203 N101 1 N204 N102 1"
INC V400
JMP HBW_Program.S0

// Rung HBW_Program#18
// Offset 89
STRNE N300 0
ANDN C56
JMP HBW_Program.S0
COPY 0x1 "4 0x0 0 MHR1 1 0x0 0 N300 1"

// Rung HBW_Program#19
// Offset 103
SG HBW_Program.S0

// Rung HBW_Program#20
// Offset 105
#BEGIN FMT_COMMENT 
"move left until X value reached assume lift in at this point"
#END

NOP

// Rung HBW_Program#21
// Offset 106
STRN C100
OUT Y50

// Rung HBW_Program#22
// Offset 108
STR ST1
OUT $HBW_Encoder_X.EnableCapture

// Rung HBW_Program#23
// Offset 110
STRLE N101 $HBW_Encoder_X.Acc
SET C100

// Rung HBW_Program#24
// Offset 115
STR C100
JMP HBW_Program.S1
RST C100

// Rung HBW_Program#25
// Offset 118
#BEGIN FMT_COMMENT 
"Go to Item on Rack for Pickup"
#END

SG HBW_Program.S1

// Rung HBW_Program#26
// Offset 120
NOP

// Rung HBW_Program#27
// Offset 121
STR ST1
OUT $HBW_Encoder_Z.EnableCapture

// Rung HBW_Program#28
// Offset 123
STRLE $HBW_Encoder_Z.Acc N102
OUT Y4

// Rung HBW_Program#29
// Offset 128
STRGE $HBW_Encoder_Z.Acc N102
JMP HBW_Program.S2

// Rung HBW_Program#30
// Offset 133
#BEGIN FMT_COMMENT 
"Lift Sequence Rack"
#END

SG HBW_Program.S2

// Rung HBW_Program#31
// Offset 135
STR ST1
ANDN C102
CALL HBW_lift_seq 0x1 DST511 "3 N102 N202 1" "3 C202 C102 1"

// Rung HBW_Program#32
// Offset 148
STR X11
AND C102
JMP HBW_Program.S3
RST C102
RST C202

// Rung HBW_Program#33
// Offset 153
#BEGIN FMT_COMMENT 
"Load Conveyor"
#END

SG HBW_Program.S3

// Rung HBW_Program#34
// Offset 155
STR ST1
ANDN C103
CALL HBW_load_convyr 0x1 DST511 "3" "3 C203 C103 1"

// Rung HBW_Program#35
// Offset 166
STR C103
JMP HBW_Program.S4
RST C103
COPY 0x1 "4 0x0 0 N202 1"

// Rung HBW_Program#36
// Offset 175
#BEGIN FMT_COMMENT 
"Conveyor Factory"
#END

SG HBW_Program.S4

// Rung HBW_Program#37
// Offset 177
STR X2
OUT Y48

// Rung HBW_Program#38
// Offset 179
STRN X2
JMP HBW_Program.S5
SET C300

// Rung HBW_Program#39
// Offset 182
#BEGIN FMT_COMMENT 
"Conveyor Warehouse"
#END

SG HBW_Program.S5

// Rung HBW_Program#40
// Offset 184
STR X1
ANDN C300
OUT Y49

// Rung HBW_Program#41
// Offset 187
STRN X1
JMP HBW_Program.S6

// Rung HBW_Program#42
// Offset 189
#BEGIN FMT_COMMENT 
"Unload Conveyor Sequence"
#END

SG HBW_Program.S6

// Rung HBW_Program#43
// Offset 191
STR ST1
ANDN C103
CALL HBW_Unload_Conv 0x1 DST511 "3" "3 C205 C103 1"

// Rung HBW_Program#44
// Offset 202
STR C103
JMP HBW_Program.S7
RST C103

// Rung HBW_Program#45
// Offset 205
NOP

// Rung HBW_Program#46
// Offset 206
NOP

// Rung HBW_Program#47
// Offset 207
#BEGIN FMT_COMMENT 
"Go to open rack spot X-location for Unload Sequence"
#END

SG HBW_Program.S7

// Rung HBW_Program#48
// Offset 209
STRN C100
OUT Y50

// Rung HBW_Program#49
// Offset 211
STR ST1
OUT $HBW_Encoder_X.EnableCapture

// Rung HBW_Program#50
// Offset 213
STRLE N101 $HBW_Encoder_X.Acc
OUT C100

// Rung HBW_Program#51
// Offset 218
STR C100
JMP HBW_Program.S8

// Rung HBW_Program#52
// Offset 220
#BEGIN FMT_COMMENT 
"Go to open rack spot Z-height for Unload Sequence"
#END

SG HBW_Program.S8

// Rung HBW_Program#53
// Offset 222
STR ST1
OUT $HBW_Encoder_Z.EnableCapture

// Rung HBW_Program#54
// Offset 224
STR ST1
MATH N103 "N102 - 215"
MATH N104 "N102 - 225"

// Rung HBW_Program#55
// Offset 241
STRLE $HBW_Encoder_Z.Acc N104
OUT Y4

// Rung HBW_Program#56
// Offset 246
STRGE $HBW_Encoder_Z.Acc N103
OUT Y5

// Rung HBW_Program#57
// Offset 251
STRGE $HBW_Encoder_Z.Acc N104
ANDLE $HBW_Encoder_Z.Acc N103
JMP HBW_Program.S9

// Rung HBW_Program#58
// Offset 260
SG HBW_Program.S9

// Rung HBW_Program#59
// Offset 262
STRN C103
CALL HBW_Unload_Rack 0x1 DST511 "3 N104 N202 1" "3 C202 C103 1"

// Rung HBW_Program#60
// Offset 274
STR C103
JMP HBW_Program.S99
RST C103
RST C202
COPY 0x1 "4 0x0 0 N202 1"

// End of Code Block HBW_Program
$PGMEND HBW_Program

#BEGIN ELEMENT_DOC
"X0","HBW_I1","","HBW - I1 = Reference switch horizontal axis -  IX_HBW_RefSwitchHor izontalAxis_I1"
"X1","HBW_I2","","HBW - I2 = Light barrier inside -  IX_HBW_LightBarrierIn side_I2"
"X2","HBW_I3","","HBW - I3 = Light barrier outside -  IX_HBW_LightBarrierO utside_I3"
"X3","HBW_I4","","HBW - I4 = Reference switch vertical axis -  IX_HBW_RefSwitchVer ticalAxis_I4"
"X4","HBW_A1","","HBW - A1 = Trail sensor (signal 1, lower) -  IX_HBW_TrailSensor1L ower_A1"
"X5","HBW_A2","","HBW - A2 = Trail sensor (signal 2, upper) -  IX_HBW_TrailSensor2 Upper_A2"
"X6","HBW_B3","","HBW - B3 = Encoder vertical axis imulse 1 -  IX_HBW_EncoderVerti calAxisImp1_B3"
"X7","HBW_B4","","HBW - B4 = Encoder vertical axis imulse 2 -  IX_HBW_EncoderVerti calAxisImp2_B4"
"X8","HBW_B1","","HBW - B1 = Encoder horizontal axis imulse 1 -  IX_HBW_EncoderHoriz ontalAxisImp1_B1"
"X9","HBW_B2","","HBW - B2 = Encoder horizontal axis imulse 2 -  IX_HBW_EncoderHoriz ontalAxisImp2_B2"
"X10","HBW_I5","","HBW - I5 = Reference switch cantilever front -  IX_HBW_SwitchCantile verFront_I5"
"X11","HBW_I6","","HBW - I6 = Reference switch cantilever back -  IX_HBW_SwitchCantile verBack_I6"
"X12","MPO_I1","","MPO - I1 = Reference switch turn-table (position vacuum) -  IX_MPO_RefSwitchTur nTable_PosVac_I1"
"X13","MPO_I2","","MPO - I2 = Reference switch turn-table (position belt) -  IX_MPO_RefSwitchTur nTable_PosBelt_I2"
"X14","MPO_I3","","MPO - I3 = Light barrier end of conveyor belt -  IX_MPO_LightBarrierEn dOfConBelt_I3"
"X15","MPO_I4","","MPO - I4 = Reference switch turn-table (position saw) -  IX_MPO_RefSwitchTur nTable_PosSaw_I4"
"X16","MPO_I5","","MPO - I5 = Reference switch vacuum (position turn-table) -  IX_MPO_RefSwitchVac _PosTurnTable_I5"
"X17","MPO_I6","","MPO - I6 = Reference switch oven feeder inside -  IX_MPO_RefSwitchOv enFeederInside_I6"
"X18","MPO_I7","","MPO - I7 = Reference switch oven feeder outside -  IX_MPO_RefSwitchOv enFeederOutside_I7"
"X19","MPO_I8","","MPO - I8 = Reference switch vacuum (position oven) -  IX_MPO_RefSwitchVac _PosOven_I8"
"X24","MPO_I9","","MPO - I9 = Light barrier oven -  IX_MPO_LightBarrierO v en_I9"
"X25","VGR_I1","","VGR - I1 = Reference switch vertical axis -  IX_VGR_RefSwitchVert icalAxis_I1"
"X26","VGR_I2","","VGR - I2 = Reference switch horizontal axis -  IX_VGR_RefSwitchHori zontalAxis_I2"
"X27","VGR_I3","","VGR - I3 = Reference switch rotate -  IX_VGR_RefSwitchRot ate_I3"
"X28","VGR_B1","","VGR - B1 = Encoder vertical axis imulse 1 -  IX_VGR_EncoderVertic alAxisImp1_B1"
"X29","VGR_B2","","VGR - B2 = Encoder vertical axis imulse 2 -  IX_VGR_EncoderVertic alAxisImp2_B2"
"X30","VGR_B3","","VGR - B3 = Encoder horizontal axis imulse 1 -  IX_VGR_EncoderHoriz ontalAxisImp1_B3"
"X31","VGR_B4","","VGR - B4 = Encoder horizontal axis imulse 2 -  IX_VGR_EncoderHoriz ontalAxisImp2_B4"
"X32","VGR_B5","","VGR - B5 = Encoder rotate impulse 1 -  IX_VGR_EncoderRotat eImp1_B5"
"X33","VGR_B6","","VGR - B6 = Encoder rotate impulse 2 -  IX_VGR_EncoderRotat eImp2_B6"
"X34","SLD_I1","","SLD - I1 = Pulse counter -  IX_SLD_PulseCounter_ I1"
"X35","SLD_I2","","SLD - I2 = Light barrier inlet -  IX_SLD_LightBarrierInl e t_I2"
"X36","SLD_I3","","SLD - I3 = Light barrier behind color sensor -  IX_SLD_LightBarrierBe hindColorSensor_I3"
"X37","SLD_I5","","SLD - I5 = Light barrier white -  IX_SLD_LightBarrierW h ite_I5"
"X38","SLD_I6","","SLD - I6 = Light barrier red -  IX_SLD_LightBarrierRe d_I6"
"X39","SLD_I7","","SLD - I7 = Light barrier blue -  IX_SLD_LightBarrierBl u e_I7"
"X40","SSC_I1","","SSC - I1 = Reference switch vertical axis -  IX_SSC_RefSwitchVerti calAxis_I1"
"X41","SSC_I2","","SSC - I2 = Reference switch horizontal axis -  IX_SSC_RefSwitchHori zontalAxis_I2"
"X42","SSC_I3","","SSC - I3 = Light barrier inlet -  IX_SSC_LightBarrierSto rage_I3"
"X43","SSC_I4","","SSC - I4 = Light barrier behind color sensor -  IX_SSC_LightBarrierOu t sourcing_I4"
"X44","SSC_B1","","SSC - B1 = Encoder vertical axis imulse 1 -  IX_SSC_EncoderVertic alAxisImp1_B1"
"X45","SSC_B2","","SSC - B2 = Encoder vertical axis imulse 2 -  IX_SSC_EncoderVertic alAxisImp2_B2"
"X46","SSC_B3","","SSC - B3 = Encoder horizontal axis imulse 1 -  IX_SSC_EncoderHorizo ntalAxisImp1_B3"
"X47","SSC_B4","","SSC - B4 = Encoder horizontal axis imulse 2 -  IX_SSC_EncoderHorizo ntalAxisImp2_B4"
"X56","VGR_PWM_ROTATE_1","","VGR - B5 = Encoder rotate impulse 1 -  IX_VGR_EncoderRotat eImp 1_B5"
"X57","VGR_PWM_ROTATE_2","","VGR - B6 = Encoder rotate impulse 2 -  IX_VGR_EncoderRotat eImp 2_B6"
"Y4","HBW_Q5","","HBW - Q5 = Motor M3 vertical axis downward -  QX_HBW_M3_Vertical AxisDownward_Q5"
"Y5","HBW_Q6","","HBW - Q6 = Motor M3 vertical axis upward -  QX_HBW_M3_Vertical AxisUpward_Q6"
"Y6","HBW_Q7","","HBW - Q7 = Motor M4 cantilever forward -  QX_HBW_M4_Cantilev erForward_Q7"
"Y7","HBW_Q8","","HBW - Q8 = Motor M4 cantilever backward -  QX_HBW_M4_Cantilev erBackward_Q8"
"Y15","MPO_Q8","","MPO - Q8 = Motor M5 vacuum towards turn- table -  QX_MPO_M5_Vacuum TowardsTurnTable_Q8"
"Y16","MPO_Q9","","MPO - Q9 = Light oven -  QX_MPO_LightOven_Q 9"
"Y17","MPO_Q10","","MPO - Q10 = Compressor -  QX_MPO_Compressor_ Q10"
"Y18","MPO_Q11","","MPO - Q11 = Valve vacuum -  QX_MPO_ValveVacuu m_Q11"
"Y19","MPO_Q12","","MPO - Q12 = Valve lowering -  QX_MPO_ValveLoweri ng_Q12"
"Y20","MPO_Q13","","MPO - Q13 = Valve oven door -  QX_MPO_ValveOvenD oor_Q13"
"Y21","MPO_Q14","","MPO - Q14 = Valve feeder -  QX_MPO_ValveFeeder _Q14"
"Y22","VGR_Q1","","VGR - Q1 = Motor M1 vertical axis up -  QX_VGR_M1_VerticalA xisUp_Q1"
"Y23","VGR_Q2","","VGR - Q2 = Motor M1 vertical axis down -  QX_VGR_M1_VerticalA xisDown_Q2"
"Y24","VGR_Q3","","VGR - Q3 = Motor M2 horizontal axis backward -  QX_VGR_M2_Horizont alAxisBackward_Q3"
"Y25","VGR_Q4","","VGR - Q4 = Motor M2 horizontal axis forward -  QX_VGR_M2_Horizont alAxisForward_Q4"
"Y26","VGR_Q5","","VGR - Q5 = Motor M3 rotate clockwise -  QX_VGR_M3_RotateCl ockwise_Q5"
"Y27","VGR_Q6","","VGR - Q6 = Motor M3 rotate counterclockwise -  QX_VGR_M3_RotateC ounterclockwise_Q6"
"Y28","VGR_Q7","","VGR - Q7 = Compressor -  QX_VGR_Compressor_ Q7"
"Y29","VGR_Q8","","VGR - Q8 = Valve vacuum -  QX_VGR_ValveVacuu m_Q8"
"Y30","SLD_Q1","","SLD - Q1 = Motor M1conveyor belt -  QX_SLD_M1_Conveyor Belt_Q1"
"Y31","SLD_Q2","","SLD - Q2 = Compressor -  QX_SLD_Compressor_ Q2"
"Y32","SLD_Q3","","SLD - Q3 = Valve first ejector (white) -  QX_SLD_ValveFirstEje ctorWhite_Q3"
"Y33","SLD_Q4","","SLD - Q4 = Valve second ejector (red) -  QX_SLD_ValveSecond EjectorRed_Q4"
"Y34","SLD_Q5","","SLD - Q5 = Valve third ejector (blue) -  QX_SLD_ValveThirdEje ctorBlue_Q5"
"Y35","SSC_Q1","","SSC - Q1 = Motor M1 vertical axis up -  QX_SSC_M1_VerticalA xisUp_Q1"
"Y36","SSC_Q2","","SSC - Q2 = Motor M1 vertical axis down -  QX_SSC_M1_VerticalA xisDown_Q2"
"Y37","SSC_Q3","","SSC - Q3 = Motor M2 horizontal axis backward -  QX_SSC_M2_Horizonta lAxisClockwise_Q3"
"Y38","SSC_Q4","","SSC - Q4 = Motor M2 horizontal axis forward -  QX_SSC_M2_Horizonta lAxisCounterclockwise_ Q4"
"Y39","SSC_Q5","","SSC - Q5 = LED Green -  QX_SSC_LED_Green_ Q5"
"Y40","SSC_Q6","","SSC - Q6 = LED Yellow -  QX_SSC_LED_Yellow_ Q6"
"Y41","SSC_Q7","","SSC - Q7 = LED Red -  QX_SSC_LED_Red_Q 7"
"Y42","SSC_Q8","","SSC - Q8 = LED Red Online -  QX_SSC_LED_Red_O nline_Q8"
"Y43","MPO_Q4","","MPO - Q4 = Motor M3 saw -  QX_MPO_M3_Saw_Q4"
"Y44","MPO_Q5","","MPO - Q5 = Motor M4 oven feeder retract -  QX_MPO_M4_OvenFe ederRetract_Q5"
"Y45","MPO_Q1","","MPO - Q1 = Motor M1 turn-table clockwise -  QX_MPO_M1_TurnTab leClockwise_Q1"
"Y46","MPO_Q2","","MPO - Q2 = Motor M1 turn-table counterclockwise -  QX_MPO_M1_TurnTab leCounterclockwise_Q2"
"Y47","MPO_Q3","","MPO - Q3 = Motor M2 conveyor belt forward -  QX_MPO_M2_Conveyo rBeltForward_Q3"
"Y48","HBW_Q1","","HBW - Q1 = Motor M1 conveyor belt forward -  QX_HBW_M1_Convey orBeltForward_Q1"
"Y49","HBW_Q2","","HBW - Q2 = Motor M1 conveyor belt backward -  QX_HBW_M1_Convey orBeltBackward_Q2"
"Y50","HBW_Q3","","HBW - Q3 = Motor M2 horizontal towards rack -  QX_HBW_M2_Horizont alTowardsRack_Q3"
"Y51","HBW_Q4","","HBW - Q4 = Motor M2 horizontal towards conveyor belt -  QX_HBW_M2_Horizont alTowardsConveyorBel t _Q4"
"Y52","MPO_Q6","","MPO - Q6 = Motor M4 oven feeder extend -  QX_MPO_M4_OvenFe ederExtend_Q6"
"Y53","MPO_Q7","","MPO - Q7 = Motor M5 vacuum towards oven -  QX_MPO_M5_Vacuum TowardsOven_Q7"
"Y80","HBW_PWM_M1","","QW_HBW_PWM_Con veyor Belt_M1"
"Y81","HBW_PWM_M2","","HBW = PWM Motor M3 vertical axis -  QW_HBW_PWM_Verti cal_ M3"
"Y82","HBW_PWM_M3","","HBW  = PWM Motor M3 vertical axis -  QW_HBW_PWM_Verti calA xis_M3"
"Y83","HBW_PWM_M4","","HBW  = PWM Motor M4 cantilever -  QW_HBW_PWM_Canti leve r_M4"
"Y88","VGR_PWM_M1","","VGR = PWM Motor M1 vertical axis -  QW_VGR_PWM_Vertic al_ M1"
"Y89","VGR_PWM_M2","","VGR = PWM Motor M2 horizontal axis -  QW_VGR_PWM_Horiz ontal _M2"
"Y90","VGR_PWM_M3","","VGR = PWM Motor M3 rotate axis -  QW_VGR_PWM_Rotat e_M 3"
"Y91","MPO_PWM_M5","","MPO = PWM Motor M5 turn-table -  QW_MPO_PWM_Vacu um_ M5"
"Y92","SSC_PWM_M1","","SSC = PWM Motor M1 vertical axis -  QW_SSC_PWM_Vertic al_ M1"
"Y93","SSC_PWM_M2","","SSC = PWM Motor M2 horizontal axis -  QW_SSC_PWM_Horiz ontal _M2"
"Y94","MPO_PWM_M1","","MPO = PWM Motor M1 turn-table -  QW_MPO_PWM_Turn Table _M1"
"WX0","SLD_A4","","SLD - A4 = Color sensor -  IW_SLD_ColorSensor_ A4"
"WX1","SSC_A1","","SSC - A1 = Color sensor -  IW_SSC_ColorSensor_ A1"
"C0","NOP","",""
"C10","","","Software STOP"
"C28","stg","",""
"C31","","","SLD White Puck Ready for Pickup"
"C32","","","SLD Red Puck Ready for Pickup"
"C33","","","SLD Blue Puck Ready for Pickup"
"C34","","","Deliver puck HBW"
"C35","","","Deliver puck train depot"
"C36","","","Pickup from Train Depot"
"C37","","","Deliver to SSC"
"C38","","","Pickup SSC"
"C39","","","GoTo Standby Location"
"C56","Hands_Free_Mode","","Enables hands free autonomous operation"
"C100","","","Manual Horiz. Limit"
"C101","","","Manual Vert. Limit"
"C102","","","End of Lift Sequence Prg."
"C200","","","Lift Forward"
"C201","","","Retract Lift"
"C202","","","End of Lift Sequence Sub."
"C203","","","End of Conveyor Load Sub."
"C204","","","End Vertical Prep."
"C205","","","End Conveyor Unload Sequence"
"C300","","","HBW Raw Material on Conveyor Factory"
"C500","","","VGR programflag 1"
"C501","","","VGR programflag 2"
"C502","set","","VGR programflag 3"
"C550","","","Vacuum On"
"C600","","","VGR subflag 1"
"C601","","","VGR subflag 2"
"C602","","","VGR subflag 3"
"C603","","","VGR subflag 4"
"C604","","","VGR subflag 5"
"C605","","","VGR subflag 6"
"C610","","","VGR subflag 11"
"C611","","","VGR subflag 12"
"C612","","","VGR subflag 13"
"C613","","","VGR subflag 14"
"C700","","","Puck in MPO oven"
"C701","","","VGR clear of MPO pickup"
"C702","","","Puck at SSC color sensor"
"C703","","","Puck at train depot"
"C840","Saw_Enable","",""
"C841","MPO_Ready","",""
"C842","MPO_Reset","",""
"C900","Vacuum_Unloaded","","Set to on when the vacuum leaves the unload state. Reset once we jump from the turn table Idle state"
"C901","Entered_End_Belt","",""
"C1700","Color_Red","","SLD Red Puck Ready for Pickup"
"C1701","Color_White","","SLD White Puck Ready for Pickup"
"C1702","Color_Blue","","SLD Blue Puck Ready for Pickup"
"C1703","Entered_Inlet","",""
"C1704","Exit_Inlet","",""
"C1705","Color_Outlet_Ent","",""
"C1706","Color_Outlet_Exi","",""
"C1707","Local_Color_Red","",""
"C1708","Local_Color_Whit","",""
"C1709","Local_Color_Blue","",""
"C2000","Auto_Mode","","Automatic Mode Enabled"
"C2001","Manual_Mode","","Manual Mode Enabled"
"V400","Hands_Free_Index","","Index for the hands free array N400-408"
"V1600","Oven_Bake_Time","",""
"V3200","Color_Sensor_SLD","",""
"V3201","Low_Color_SLD","",""
"N101","","","HBW Col Encoder Value"
"N102","","","HBW Row Encoder Value"
"N400","","","Hands Free Array Row 1 Col 1"
"N401","","","Hands Free Array Row 1 Col 2"
"N402","","","Hands Free Array Row 1 Col 3"
"N403","","","Hands Free Array Row 2 Col 1"
"N404","","","Hands Free Array Row 2 Col 2"
"N405","","","Hands Free Array Row 2 Col 3"
"N406","","","Hands Free Array Row 3 Col 1"
"N407","","","Hands Free Array Row 3 Col 2"
"N408","","","Hands Free Array Row 3 Col 3"
"N1000","","","VGR subshort_int_1"
"N1001","","","VGR subshort_int_2"
"N1002","","","VGR subshort_int_3"
"R100","","","PWM HBW Conveyor Duty Cycle"
"R101","","","PWM HBW Horizontal Duty Cycle"
"R102","","","PWM HBW Vertical Duty Cycle"
"R103","","","PWM HBW Cantilever Duty Cycle"
"R900","","","PWM VGR Vertical Duty Cycle"
"R901","","","PWM VGR Horizontal Duty Cycle"
"R902","","","PWM VGR Rotate Duty Cycle"
"VGR_Program.S0","","","HBW Pickup"
"VGR_Program.S1","","","MPO Dropoff"
"VGR_Program.S2","","","SLD White Pickup"
"VGR_Program.S3","","","SLD Red Pickup"
"VGR_Program.S4","","","SLD Blue Pickup"
"VGR_Program.S5","","","Deliver puck HBW"
"VGR_Program.S6","","","Deliver puck train depot"
"VGR_Program.S7","","","Next_command_Queue"
"VGR_Program.S8","","","Pickup from Train Depot"
"VGR_Program.S9","","","Deliver to SSC"
"VGR_Program.S10","","","Pickup SSC"
"VGR_Program.S11","","","GoTo Standby Location"
"VGR_Program.S99","","","VGR Home"
"VGR_Program.S100","","","VGR Manual Mode"
"MPO_Program.S0","Init_MPO","",""
"MPO_Program.S1","Oven_Reset","",""
"MPO_Program.S2","Vacuum_Reset","",""
"MPO_Program.S3","TurnTable_Reset","",""
"MPO_Program.S4","Oven_Load","",""
"MPO_Program.S5","Vacuum_Move_Oven","",""
"MPO_Program.S6","TurnTable_Saw","",""
"MPO_Program.S7","Oven_Bake","",""
"MPO_Program.S8","Vacuum_Load","",""
"MPO_Program.S9","TurnTable_Unload","",""
"MPO_Program.S10","Oven_Unload","",""
"MPO_Program.S11","Vacuum_Move_Turn","",""
"MPO_Program.S12","TurnTable_Belt","",""
"MPO_Program.S13","Vacuum_Unload","",""
"SLD_Program.S0","Init_Sorter","",""
"SLD_Program.S1","Sorter_Belt","",""
"SLD_Program.S2","Sorter_Color","",""
"SLD_Program.S3","Sorter_Push","",""
"SLD_Program.S4","Sorter_Reset","",""
#END

